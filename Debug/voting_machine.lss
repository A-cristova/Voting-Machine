
voting_machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  000041f4  00004288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800156  00800156  0000437e  2**0
                  ALLOC
  3 .stab         00002fc4  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f0c  00000000  00000000  00007344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000083b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000853f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b685  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ca4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 35       	cpi	r26, 0x5A	; 90
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 20 	call	0x40e6	; 0x40e6 <main>
      8a:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e4       	ldi	r26, 0x4D	; 77
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e4       	ldi	r24, 0x4D	; 77
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 20 	jmp	0x4108	; 0x4108 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e4       	ldi	r22, 0x4D	; 77
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setpindirection>:
#include <GPIO_Enums_func.h>
#include "Typedef.h"
#include "common_macros.h"

void GPIO_setpindirection ( DIO_port_name port, DIO_pin_name pin, DIO_pin_direction direction) //function to Set The Direction to pin
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_setpindirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setpindirection+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <GPIO_setpindirection+0x2a>
     cc6:	47 c0       	rjmp	.+142    	; 0xd56 <GPIO_setpindirection+0xb8>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <GPIO_setpindirection+0x3e>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <GPIO_setpindirection+0x58>
     cda:	cb c0       	rjmp	.+406    	; 0xe72 <GPIO_setpindirection+0x1d4>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <GPIO_setpindirection+0x4a>
     ce6:	67 c0       	rjmp	.+206    	; 0xdb6 <GPIO_setpindirection+0x118>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <GPIO_setpindirection+0x56>
     cf2:	91 c0       	rjmp	.+290    	; 0xe16 <GPIO_setpindirection+0x178>
     cf4:	be c0       	rjmp	.+380    	; 0xe72 <GPIO_setpindirection+0x1d4>
	{
	      case PORT_A : if(direction==INPUT)
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 23       	and	r24, r24
     cfa:	a9 f4       	brne	.+42     	; 0xd26 <GPIO_setpindirection+0x88>
	                    {
		                      CLEAR_BIT(DDRA,pin);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <GPIO_setpindirection+0x7c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <GPIO_setpindirection+0x78>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	a6 c0       	rjmp	.+332    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    }
	                    else if(direction==OUTPUT)
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	09 f0       	breq	.+2      	; 0xd2e <GPIO_setpindirection+0x90>
     d2c:	a2 c0       	rjmp	.+324    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    {
	    	                  SET_BIT(DDRA,pin);
     d2e:	aa e3       	ldi	r26, 0x3A	; 58
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e3       	ldi	r30, 0x3A	; 58
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <GPIO_setpindirection+0xae>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <GPIO_setpindirection+0xaa>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	8e c0       	rjmp	.+284    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    }
	      break;
	      case PORT_B : if(direction==INPUT)
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	88 23       	and	r24, r24
     d5a:	a9 f4       	brne	.+42     	; 0xd86 <GPIO_setpindirection+0xe8>
	                    {
		                      CLEAR_BIT(DDRB,pin);
     d5c:	a7 e3       	ldi	r26, 0x37	; 55
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e7 e3       	ldi	r30, 0x37	; 55
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <GPIO_setpindirection+0xdc>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <GPIO_setpindirection+0xd8>
     d7e:	80 95       	com	r24
     d80:	84 23       	and	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	76 c0       	rjmp	.+236    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    }
	                    else if(direction==OUTPUT)
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	09 f0       	breq	.+2      	; 0xd8e <GPIO_setpindirection+0xf0>
     d8c:	72 c0       	rjmp	.+228    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    {
	    	                  SET_BIT(DDRB,pin);
     d8e:	a7 e3       	ldi	r26, 0x37	; 55
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e3       	ldi	r30, 0x37	; 55
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <GPIO_setpindirection+0x10e>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <GPIO_setpindirection+0x10a>
     db0:	84 2b       	or	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	5e c0       	rjmp	.+188    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    }
	      break;
	      case PORT_C : if(direction==INPUT)
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	88 23       	and	r24, r24
     dba:	a9 f4       	brne	.+42     	; 0xde6 <GPIO_setpindirection+0x148>
	                    {
		                      CLEAR_BIT(DDRC,pin);
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_setpindirection+0x13c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_setpindirection+0x138>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	46 c0       	rjmp	.+140    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    }
	                    else if(direction==OUTPUT)
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	09 f0       	breq	.+2      	; 0xdee <GPIO_setpindirection+0x150>
     dec:	42 c0       	rjmp	.+132    	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    {
	    	                  SET_BIT(DDRC,pin);
     dee:	a4 e3       	ldi	r26, 0x34	; 52
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e4 e3       	ldi	r30, 0x34	; 52
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <GPIO_setpindirection+0x16e>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <GPIO_setpindirection+0x16a>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	2e c0       	rjmp	.+92     	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    }
	      break;
	      case PORT_D : if(direction==INPUT)
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	88 23       	and	r24, r24
     e1a:	a9 f4       	brne	.+42     	; 0xe46 <GPIO_setpindirection+0x1a8>
	                    {
		                      CLEAR_BIT(DDRD,pin);
     e1c:	a1 e3       	ldi	r26, 0x31	; 49
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e1 e3       	ldi	r30, 0x31	; 49
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <GPIO_setpindirection+0x19c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <GPIO_setpindirection+0x198>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	16 c0       	rjmp	.+44     	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    }
	                    else if(direction==OUTPUT)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	99 f4       	brne	.+38     	; 0xe72 <GPIO_setpindirection+0x1d4>
	                    {
	    	                  SET_BIT(DDRD,pin);
     e4c:	a1 e3       	ldi	r26, 0x31	; 49
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e1 e3       	ldi	r30, 0x31	; 49
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <GPIO_setpindirection+0x1cc>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <GPIO_setpindirection+0x1c8>
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
	                    }
	      break;
	      default :
	      break;
	}
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <GPIO_writepin>:

void GPIO_writepin (DIO_port_name port, DIO_pin_name pin, DIO_pin_output_value value) //function to write the output value to pin
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <GPIO_writepin+0x6>
     e88:	00 d0       	rcall	.+0      	; 0xe8a <GPIO_writepin+0x8>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	6a 83       	std	Y+2, r22	; 0x02
     e94:	4b 83       	std	Y+3, r20	; 0x03
    switch(port)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3d 83       	std	Y+5, r19	; 0x05
     e9e:	2c 83       	std	Y+4, r18	; 0x04
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <GPIO_writepin+0x2a>
     eaa:	47 c0       	rjmp	.+142    	; 0xf3a <GPIO_writepin+0xb8>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	2c f4       	brge	.+10     	; 0xec0 <GPIO_writepin+0x3e>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	71 f0       	breq	.+28     	; 0xeda <GPIO_writepin+0x58>
     ebe:	cb c0       	rjmp	.+406    	; 0x1056 <GPIO_writepin+0x1d4>
     ec0:	2c 81       	ldd	r18, Y+4	; 0x04
     ec2:	3d 81       	ldd	r19, Y+5	; 0x05
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <GPIO_writepin+0x4a>
     eca:	67 c0       	rjmp	.+206    	; 0xf9a <GPIO_writepin+0x118>
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <GPIO_writepin+0x56>
     ed6:	91 c0       	rjmp	.+290    	; 0xffa <GPIO_writepin+0x178>
     ed8:	be c0       	rjmp	.+380    	; 0x1056 <GPIO_writepin+0x1d4>
    {
          case PORT_A : if(value==LOW)
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	88 23       	and	r24, r24
     ede:	a9 f4       	brne	.+42     	; 0xf0a <GPIO_writepin+0x88>
                        {
	                          CLEAR_BIT(PORTA,pin);
     ee0:	ab e3       	ldi	r26, 0x3B	; 59
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e3       	ldi	r30, 0x3B	; 59
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <GPIO_writepin+0x7c>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <GPIO_writepin+0x78>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	a6 c0       	rjmp	.+332    	; 0x1056 <GPIO_writepin+0x1d4>
                        }
                        else if(value==HIGH)
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	09 f0       	breq	.+2      	; 0xf12 <GPIO_writepin+0x90>
     f10:	a2 c0       	rjmp	.+324    	; 0x1056 <GPIO_writepin+0x1d4>
                        {
  	                          SET_BIT(PORTA,pin);
     f12:	ab e3       	ldi	r26, 0x3B	; 59
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	eb e3       	ldi	r30, 0x3B	; 59
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_writepin+0xae>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_writepin+0xaa>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	8e c0       	rjmp	.+284    	; 0x1056 <GPIO_writepin+0x1d4>
                        }
          break;
          case PORT_B : if(value==LOW)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 23       	and	r24, r24
     f3e:	a9 f4       	brne	.+42     	; 0xf6a <GPIO_writepin+0xe8>
                        {
	                          CLEAR_BIT(PORTB,pin);
     f40:	a8 e3       	ldi	r26, 0x38	; 56
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e8 e3       	ldi	r30, 0x38	; 56
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_writepin+0xdc>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_writepin+0xd8>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	76 c0       	rjmp	.+236    	; 0x1056 <GPIO_writepin+0x1d4>
                        }
                        else if(value==HIGH)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <GPIO_writepin+0xf0>
     f70:	72 c0       	rjmp	.+228    	; 0x1056 <GPIO_writepin+0x1d4>
                        {
  	                          SET_BIT(PORTB,pin);
     f72:	a8 e3       	ldi	r26, 0x38	; 56
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 e3       	ldi	r30, 0x38	; 56
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_writepin+0x10e>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_writepin+0x10a>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	5e c0       	rjmp	.+188    	; 0x1056 <GPIO_writepin+0x1d4>
                        }
          break;
          case PORT_C : if(value==LOW)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 23       	and	r24, r24
     f9e:	a9 f4       	brne	.+42     	; 0xfca <GPIO_writepin+0x148>
                        {
	                          CLEAR_BIT(PORTC,pin);
     fa0:	a5 e3       	ldi	r26, 0x35	; 53
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e3       	ldi	r30, 0x35	; 53
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_writepin+0x13c>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_writepin+0x138>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	46 c0       	rjmp	.+140    	; 0x1056 <GPIO_writepin+0x1d4>
                        }
                        else if(value==HIGH)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <GPIO_writepin+0x150>
     fd0:	42 c0       	rjmp	.+132    	; 0x1056 <GPIO_writepin+0x1d4>
                        {
  	                          SET_BIT(PORTC,pin);
     fd2:	a5 e3       	ldi	r26, 0x35	; 53
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e3       	ldi	r30, 0x35	; 53
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writepin+0x16e>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writepin+0x16a>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	2e c0       	rjmp	.+92     	; 0x1056 <GPIO_writepin+0x1d4>
                        }
          break;
          case PORT_D : if(value==LOW)
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	88 23       	and	r24, r24
     ffe:	a9 f4       	brne	.+42     	; 0x102a <GPIO_writepin+0x1a8>
                        {
	                          CLEAR_BIT(PORTD,pin);
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_writepin+0x19c>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_writepin+0x198>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <GPIO_writepin+0x1d4>
                        }
                        else if(value==HIGH)
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	99 f4       	brne	.+38     	; 0x1056 <GPIO_writepin+0x1d4>
                        {
  	                          SET_BIT(PORTD,pin);
    1030:	a2 e3       	ldi	r26, 0x32	; 50
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writepin+0x1cc>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writepin+0x1c8>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
                        }
          break;
          default :
          break;
    }
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <GPIO_readpin>:

uint_8 GPIO_readpin (DIO_port_name port, DIO_pin_name pin)  //function to Read the input value to pin
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <GPIO_readpin+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <GPIO_readpin+0x8>
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	8a 83       	std	Y+2, r24	; 0x02
    1076:	6b 83       	std	Y+3, r22	; 0x03
	uint_8 localreading =0x00;
    1078:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	4c 81       	ldd	r20, Y+4	; 0x04
    1086:	5d 81       	ldd	r21, Y+5	; 0x05
    1088:	41 30       	cpi	r20, 0x01	; 1
    108a:	51 05       	cpc	r21, r1
    108c:	41 f1       	breq	.+80     	; 0x10de <GPIO_readpin+0x78>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	91 05       	cpc	r25, r1
    1096:	34 f4       	brge	.+12     	; 0x10a4 <GPIO_readpin+0x3e>
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	21 15       	cp	r18, r1
    109e:	31 05       	cpc	r19, r1
    10a0:	61 f0       	breq	.+24     	; 0x10ba <GPIO_readpin+0x54>
    10a2:	52 c0       	rjmp	.+164    	; 0x1148 <GPIO_readpin+0xe2>
    10a4:	4c 81       	ldd	r20, Y+4	; 0x04
    10a6:	5d 81       	ldd	r21, Y+5	; 0x05
    10a8:	42 30       	cpi	r20, 0x02	; 2
    10aa:	51 05       	cpc	r21, r1
    10ac:	51 f1       	breq	.+84     	; 0x1102 <GPIO_readpin+0x9c>
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	b9 f1       	breq	.+110    	; 0x1126 <GPIO_readpin+0xc0>
    10b8:	47 c0       	rjmp	.+142    	; 0x1148 <GPIO_readpin+0xe2>
	{
	      case PORT_A :
	    	            localreading = GET_BIT(PINA,pin);
    10ba:	e9 e3       	ldi	r30, 0x39	; 57
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a9 01       	movw	r20, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_readpin+0x6c>
    10ce:	55 95       	asr	r21
    10d0:	47 95       	ror	r20
    10d2:	8a 95       	dec	r24
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_readpin+0x68>
    10d6:	ca 01       	movw	r24, r20
    10d8:	81 70       	andi	r24, 0x01	; 1
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	35 c0       	rjmp	.+106    	; 0x1148 <GPIO_readpin+0xe2>
	      break;
	      case PORT_B :
	    	            localreading = GET_BIT(PINB,pin);
    10de:	e6 e3       	ldi	r30, 0x36	; 54
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_readpin+0x90>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_readpin+0x8c>
    10fa:	ca 01       	movw	r24, r20
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	23 c0       	rjmp	.+70     	; 0x1148 <GPIO_readpin+0xe2>
	      break;
	      case PORT_C :
	    	            localreading = GET_BIT(PINC,pin);
    1102:	e3 e3       	ldi	r30, 0x33	; 51
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a9 01       	movw	r20, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_readpin+0xb4>
    1116:	55 95       	asr	r21
    1118:	47 95       	ror	r20
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_readpin+0xb0>
    111e:	ca 01       	movw	r24, r20
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <GPIO_readpin+0xe2>
	      break;
	      case PORT_D :
	    	            localreading = GET_BIT(PIND,pin);
    1126:	e0 e3       	ldi	r30, 0x30	; 48
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_readpin+0xd8>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_readpin+0xd4>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
	      break;
          default :
          break;
	}
	return localreading;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <GPIO_setportdirection>:

void GPIO_setportdirection ( DIO_port_name port, uint_8 direction) //function to Set The Direction to port
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_setportdirection+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <GPIO_setportdirection+0x8>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3c 83       	std	Y+4, r19	; 0x04
    1172:	2b 83       	std	Y+3, r18	; 0x03
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	21 f1       	breq	.+72     	; 0x11c6 <GPIO_setportdirection+0x6c>
    117e:	2b 81       	ldd	r18, Y+3	; 0x03
    1180:	3c 81       	ldd	r19, Y+4	; 0x04
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	2c f4       	brge	.+10     	; 0x1192 <GPIO_setportdirection+0x38>
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	61 f0       	breq	.+24     	; 0x11a8 <GPIO_setportdirection+0x4e>
    1190:	46 c0       	rjmp	.+140    	; 0x121e <GPIO_setportdirection+0xc4>
    1192:	2b 81       	ldd	r18, Y+3	; 0x03
    1194:	3c 81       	ldd	r19, Y+4	; 0x04
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	21 f1       	breq	.+72     	; 0x11e4 <GPIO_setportdirection+0x8a>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	71 f1       	breq	.+92     	; 0x1202 <GPIO_setportdirection+0xa8>
    11a6:	3b c0       	rjmp	.+118    	; 0x121e <GPIO_setportdirection+0xc4>
	{
	      case PORT_A : if (direction==INPUT_PORT)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	88 23       	and	r24, r24
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <GPIO_setportdirection+0x5c>
	                    {
	    	                  DDRA=0x00;
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	10 82       	st	Z, r1
    11b4:	34 c0       	rjmp	.+104    	; 0x121e <GPIO_setportdirection+0xc4>
	                    }
	                    else if (direction==OUTPUT_PORT)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	89 f5       	brne	.+98     	; 0x121e <GPIO_setportdirection+0xc4>
	                    {
	    	                  DDRA=0xFF;
    11bc:	ea e3       	ldi	r30, 0x3A	; 58
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	80 83       	st	Z, r24
    11c4:	2c c0       	rjmp	.+88     	; 0x121e <GPIO_setportdirection+0xc4>
	                    }
	      break;
	      case PORT_B : if (direction==INPUT_PORT)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	88 23       	and	r24, r24
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <GPIO_setportdirection+0x7a>
	                    {
	    	                  DDRB=0x00;
    11cc:	e7 e3       	ldi	r30, 0x37	; 55
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	10 82       	st	Z, r1
    11d2:	25 c0       	rjmp	.+74     	; 0x121e <GPIO_setportdirection+0xc4>
	                    }
	                    else if (direction==OUTPUT_PORT)
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	11 f5       	brne	.+68     	; 0x121e <GPIO_setportdirection+0xc4>
	                    {
	    	                  DDRB=0xFF;
    11da:	e7 e3       	ldi	r30, 0x37	; 55
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	80 83       	st	Z, r24
    11e2:	1d c0       	rjmp	.+58     	; 0x121e <GPIO_setportdirection+0xc4>
	                    }
	      break;
	      case PORT_C : if (direction==INPUT_PORT)
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 23       	and	r24, r24
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <GPIO_setportdirection+0x98>
	                    {
	    	                  DDRC=0x00;
    11ea:	e4 e3       	ldi	r30, 0x34	; 52
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	10 82       	st	Z, r1
    11f0:	16 c0       	rjmp	.+44     	; 0x121e <GPIO_setportdirection+0xc4>
	                    }
	                    else if (direction==OUTPUT_PORT)
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	99 f4       	brne	.+38     	; 0x121e <GPIO_setportdirection+0xc4>
	                    {
	    	                  DDRC=0xFF;
    11f8:	e4 e3       	ldi	r30, 0x34	; 52
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	80 83       	st	Z, r24
    1200:	0e c0       	rjmp	.+28     	; 0x121e <GPIO_setportdirection+0xc4>
	                    }
	      break;
	      case PORT_D : if (direction==INPUT_PORT)
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	88 23       	and	r24, r24
    1206:	21 f4       	brne	.+8      	; 0x1210 <GPIO_setportdirection+0xb6>
	                    {
	    	                  DDRD=0x00;
    1208:	e1 e3       	ldi	r30, 0x31	; 49
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1
    120e:	07 c0       	rjmp	.+14     	; 0x121e <GPIO_setportdirection+0xc4>
	                    }
	                    else if (direction==OUTPUT_PORT)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	21 f4       	brne	.+8      	; 0x121e <GPIO_setportdirection+0xc4>
	                    {
	    	                  DDRD=0xFF;
    1216:	e1 e3       	ldi	r30, 0x31	; 49
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	80 83       	st	Z, r24
	                    }
	      break;
	      default :
	      break;
	}
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <GPIO_writeport>:

void GPIO_writeport (DIO_port_name port, DIO_port_output_value value) //function to write the output value to port
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_writeport+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <GPIO_writeport+0x8>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	6a 83       	std	Y+2, r22	; 0x02
    switch(port)
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3c 83       	std	Y+4, r19	; 0x04
    1244:	2b 83       	std	Y+3, r18	; 0x03
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	21 f1       	breq	.+72     	; 0x1298 <GPIO_writeport+0x6c>
    1250:	2b 81       	ldd	r18, Y+3	; 0x03
    1252:	3c 81       	ldd	r19, Y+4	; 0x04
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <GPIO_writeport+0x38>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <GPIO_writeport+0x4e>
    1262:	46 c0       	rjmp	.+140    	; 0x12f0 <GPIO_writeport+0xc4>
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	3c 81       	ldd	r19, Y+4	; 0x04
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	21 f1       	breq	.+72     	; 0x12b6 <GPIO_writeport+0x8a>
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	71 f1       	breq	.+92     	; 0x12d4 <GPIO_writeport+0xa8>
    1278:	3b c0       	rjmp	.+118    	; 0x12f0 <GPIO_writeport+0xc4>
    {
          case PORT_A : if(value==LOW_PORT)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	88 23       	and	r24, r24
    127e:	21 f4       	brne	.+8      	; 0x1288 <GPIO_writeport+0x5c>
                        {
        	                  PORTA =0x00;
    1280:	eb e3       	ldi	r30, 0x3B	; 59
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	10 82       	st	Z, r1
    1286:	34 c0       	rjmp	.+104    	; 0x12f0 <GPIO_writeport+0xc4>
                        }
                        else if(value ==HIGH_PORT)
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	89 f5       	brne	.+98     	; 0x12f0 <GPIO_writeport+0xc4>
                        {
        	                  PORTA =0xFF;
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8f ef       	ldi	r24, 0xFF	; 255
    1294:	80 83       	st	Z, r24
    1296:	2c c0       	rjmp	.+88     	; 0x12f0 <GPIO_writeport+0xc4>
                        }
          break;
          case PORT_B : if(value==LOW_PORT)
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	88 23       	and	r24, r24
    129c:	21 f4       	brne	.+8      	; 0x12a6 <GPIO_writeport+0x7a>
                        {
        	                  PORTB =0x00;
    129e:	e8 e3       	ldi	r30, 0x38	; 56
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	10 82       	st	Z, r1
    12a4:	25 c0       	rjmp	.+74     	; 0x12f0 <GPIO_writeport+0xc4>
                        }
                        else if(value ==HIGH_PORT)
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	11 f5       	brne	.+68     	; 0x12f0 <GPIO_writeport+0xc4>
                        {
        	                  PORTB =0xFF;
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	80 83       	st	Z, r24
    12b4:	1d c0       	rjmp	.+58     	; 0x12f0 <GPIO_writeport+0xc4>
                        }
          break;
          case PORT_C : if(value==LOW_PORT)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 23       	and	r24, r24
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <GPIO_writeport+0x98>
                        {
        	                  PORTC =0x00;
    12bc:	e5 e3       	ldi	r30, 0x35	; 53
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	10 82       	st	Z, r1
    12c2:	16 c0       	rjmp	.+44     	; 0x12f0 <GPIO_writeport+0xc4>
                        }
                        else if(value ==HIGH_PORT)
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	99 f4       	brne	.+38     	; 0x12f0 <GPIO_writeport+0xc4>
                        {
        	                  PORTC =0xFF;
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	80 83       	st	Z, r24
    12d2:	0e c0       	rjmp	.+28     	; 0x12f0 <GPIO_writeport+0xc4>
                        }
          break;
          case PORT_D : if(value==LOW_PORT)
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	88 23       	and	r24, r24
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <GPIO_writeport+0xb6>
                        {
        	                  PORTD =0x00;
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <GPIO_writeport+0xc4>
                        }
                        else if(value ==HIGH_PORT)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	21 f4       	brne	.+8      	; 0x12f0 <GPIO_writeport+0xc4>
                        {
        	                  PORTD =0xFF;
    12e8:	e2 e3       	ldi	r30, 0x32	; 50
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	80 83       	st	Z, r24
                        }
          break;
          default :
          break;
    }
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <GPIO_readport>:

uint_8 GPIO_readport (DIO_port_name port) //function to Read the input value to port
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <GPIO_readport+0x6>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <GPIO_readport+0x8>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 localreading=0x00;
    130c:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3c 83       	std	Y+4, r19	; 0x04
    1316:	2b 83       	std	Y+3, r18	; 0x03
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	d1 f0       	breq	.+52     	; 0x1356 <GPIO_readport+0x58>
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	3c 81       	ldd	r19, Y+4	; 0x04
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <GPIO_readport+0x38>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 f0       	breq	.+24     	; 0x134c <GPIO_readport+0x4e>
    1334:	1e c0       	rjmp	.+60     	; 0x1372 <GPIO_readport+0x74>
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <GPIO_readport+0x62>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <GPIO_readport+0x6c>
    134a:	13 c0       	rjmp	.+38     	; 0x1372 <GPIO_readport+0x74>
	{
	      case PORT_A :
	    	            localreading =PINA;
    134c:	e9 e3       	ldi	r30, 0x39	; 57
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	0e c0       	rjmp	.+28     	; 0x1372 <GPIO_readport+0x74>
	      break;
	      case PORT_B :
	    	            localreading =PINB;
    1356:	e6 e3       	ldi	r30, 0x36	; 54
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <GPIO_readport+0x74>
	      break;
	      case PORT_C :
	    	            localreading =PINC;
    1360:	e3 e3       	ldi	r30, 0x33	; 51
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <GPIO_readport+0x74>
	      break;
	      case PORT_D :
	    	            localreading =PIND;
    136a:	e0 e3       	ldi	r30, 0x30	; 48
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	89 83       	std	Y+1, r24	; 0x01
	      break;
	      default :
	      break;
	}
	return localreading ;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	6c 97       	sbiw	r28, 0x1c	; 28
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setpindirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT);
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT);
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	62 e0       	ldi	r22, 0x02	; 2
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 ea       	ldi	r26, 0xA0	; 160
    13b0:	b1 e4       	ldi	r27, 0x41	; 65
    13b2:	89 8f       	std	Y+25, r24	; 0x19
    13b4:	9a 8f       	std	Y+26, r25	; 0x1a
    13b6:	ab 8f       	std	Y+27, r26	; 0x1b
    13b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	69 8d       	ldd	r22, Y+25	; 0x19
    13bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a e7       	ldi	r20, 0x7A	; 122
    13c8:	55 e4       	ldi	r21, 0x45	; 69
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8d 8b       	std	Y+21, r24	; 0x15
    13d4:	9e 8b       	std	Y+22, r25	; 0x16
    13d6:	af 8b       	std	Y+23, r26	; 0x17
    13d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13da:	6d 89       	ldd	r22, Y+21	; 0x15
    13dc:	7e 89       	ldd	r23, Y+22	; 0x16
    13de:	8f 89       	ldd	r24, Y+23	; 0x17
    13e0:	98 8d       	ldd	r25, Y+24	; 0x18
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <LCD_init+0x7a>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <LCD_init+0xf8>
	else if (__tmp > 65535)
    13fc:	6d 89       	ldd	r22, Y+21	; 0x15
    13fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1400:	8f 89       	ldd	r24, Y+23	; 0x17
    1402:	98 8d       	ldd	r25, Y+24	; 0x18
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	69 8d       	ldd	r22, Y+25	; 0x19
    1416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
    143c:	0f c0       	rjmp	.+30     	; 0x145c <LCD_init+0xda>
    143e:	80 e9       	ldi	r24, 0x90	; 144
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	9a 8b       	std	Y+18, r25	; 0x12
    1444:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1446:	89 89       	ldd	r24, Y+17	; 0x11
    1448:	9a 89       	ldd	r25, Y+18	; 0x12
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <LCD_init+0xc8>
    144e:	9a 8b       	std	Y+18, r25	; 0x12
    1450:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	8b 89       	ldd	r24, Y+19	; 0x13
    1454:	9c 89       	ldd	r25, Y+20	; 0x14
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	9c 8b       	std	Y+20, r25	; 0x14
    145a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	8b 89       	ldd	r24, Y+19	; 0x13
    145e:	9c 89       	ldd	r25, Y+20	; 0x14
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <LCD_init+0xbc>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	6d 89       	ldd	r22, Y+21	; 0x15
    1468:	7e 89       	ldd	r23, Y+22	; 0x16
    146a:	8f 89       	ldd	r24, Y+23	; 0x17
    146c:	98 8d       	ldd	r25, Y+24	; 0x18
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9c 8b       	std	Y+20, r25	; 0x14
    1478:	8b 8b       	std	Y+19, r24	; 0x13
    147a:	8b 89       	ldd	r24, Y+19	; 0x13
    147c:	9c 89       	ldd	r25, Y+20	; 0x14
    147e:	98 8b       	std	Y+16, r25	; 0x10
    1480:	8f 87       	std	Y+15, r24	; 0x0f
    1482:	8f 85       	ldd	r24, Y+15	; 0x0f
    1484:	98 89       	ldd	r25, Y+16	; 0x10
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LCD_init+0x104>
    148a:	98 8b       	std	Y+16, r25	; 0x10
    148c:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_BIT_MODE == 4)

	/* 2 - Configure the data pins as output port */
	GPIO_setpindirection(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,OUTPUT);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	63 e0       	ldi	r22, 0x03	; 3
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,OUTPUT);
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	64 e0       	ldi	r22, 0x04	; 4
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,OUTPUT);
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	65 e0       	ldi	r22, 0x05	; 5
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,OUTPUT);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 ea       	ldi	r26, 0xA0	; 160
    14bc:	b1 e4       	ldi	r27, 0x41	; 65
    14be:	8b 87       	std	Y+11, r24	; 0x0b
    14c0:	9c 87       	std	Y+12, r25	; 0x0c
    14c2:	ad 87       	std	Y+13, r26	; 0x0d
    14c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    14cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4a e7       	ldi	r20, 0x7A	; 122
    14d4:	55 e4       	ldi	r21, 0x45	; 69
    14d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	8f 83       	std	Y+7, r24	; 0x07
    14e0:	98 87       	std	Y+8, r25	; 0x08
    14e2:	a9 87       	std	Y+9, r26	; 0x09
    14e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	2c f4       	brge	.+10     	; 0x1508 <LCD_init+0x186>
		__ticks = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9e 83       	std	Y+6, r25	; 0x06
    1504:	8d 83       	std	Y+5, r24	; 0x05
    1506:	3f c0       	rjmp	.+126    	; 0x1586 <LCD_init+0x204>
	else if (__tmp > 65535)
    1508:	6f 81       	ldd	r22, Y+7	; 0x07
    150a:	78 85       	ldd	r23, Y+8	; 0x08
    150c:	89 85       	ldd	r24, Y+9	; 0x09
    150e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	4c f5       	brge	.+82     	; 0x1572 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	6b 85       	ldd	r22, Y+11	; 0x0b
    1522:	7c 85       	ldd	r23, Y+12	; 0x0c
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <LCD_init+0x1e6>
    154a:	80 e9       	ldi	r24, 0x90	; 144
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <LCD_init+0x1d4>
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <LCD_init+0x1c8>
    1570:	14 c0       	rjmp	.+40     	; 0x159a <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	6f 81       	ldd	r22, Y+7	; 0x07
    1574:	78 85       	ldd	r23, Y+8	; 0x08
    1576:	89 85       	ldd	r24, Y+9	; 0x09
    1578:	9a 85       	ldd	r25, Y+10	; 0x0a
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <LCD_init+0x210>
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 3.2 - send commands 0x33 0x32 0x28 to init lcd*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    159a:	83 e3       	ldi	r24, 0x33	; 51
    159c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    15a0:	82 e3       	ldi	r24, 0x32	; 50
    15a2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    15a6:	88 e2       	ldi	r24, 0x28	; 40
    15a8:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_sendCommand>
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    15ac:	8c e0       	ldi	r24, 0x0C	; 12
    15ae:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_sendCommand>
}
    15b8:	6c 96       	adiw	r28, 0x1c	; 28
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint_8 command)
{
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	c5 59       	subi	r28, 0x95	; 149
    15d8:	d0 40       	sbci	r29, 0x00	; 0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	fe 01       	movw	r30, r28
    15e6:	eb 56       	subi	r30, 0x6B	; 107
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writepin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    15f6:	fe 01       	movw	r30, r28
    15f8:	ef 56       	subi	r30, 0x6F	; 111
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e8       	ldi	r26, 0x80	; 128
    1602:	bf e3       	ldi	r27, 0x3F	; 63
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    160c:	8e 01       	movw	r16, r28
    160e:	03 57       	subi	r16, 0x73	; 115
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	ef 56       	subi	r30, 0x6F	; 111
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	2b ea       	ldi	r18, 0xAB	; 171
    1622:	3a ea       	ldi	r19, 0xAA	; 170
    1624:	4a ea       	ldi	r20, 0xAA	; 170
    1626:	50 e4       	ldi	r21, 0x40	; 64
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    163a:	fe 01       	movw	r30, r28
    163c:	e3 57       	subi	r30, 0x73	; 115
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	34 f4       	brge	.+12     	; 0x1664 <LCD_sendCommand+0x9a>
		__ticks = 1;
    1658:	fe 01       	movw	r30, r28
    165a:	e4 57       	subi	r30, 0x74	; 116
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 83       	st	Z, r24
    1662:	e0 c0       	rjmp	.+448    	; 0x1824 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    1664:	fe 01       	movw	r30, r28
    1666:	e3 57       	subi	r30, 0x73	; 115
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	53 e4       	ldi	r21, 0x43	; 67
    167a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	0c f0       	brlt	.+2      	; 0x1684 <LCD_sendCommand+0xba>
    1682:	c0 c0       	rjmp	.+384    	; 0x1804 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1684:	fe 01       	movw	r30, r28
    1686:	ef 56       	subi	r30, 0x6F	; 111
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	54 e4       	ldi	r21, 0x44	; 68
    169a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	fe 01       	movw	r30, r28
    16a4:	e8 57       	subi	r30, 0x78	; 120
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 83       	st	Z, r24
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	a2 83       	std	Z+2, r26	; 0x02
    16ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	8e 01       	movw	r16, r28
    16b2:	0c 57       	subi	r16, 0x7C	; 124
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	fe 01       	movw	r30, r28
    16b8:	e8 57       	subi	r30, 0x78	; 120
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	55 e4       	ldi	r21, 0x45	; 69
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16de:	fe 01       	movw	r30, r28
    16e0:	ec 57       	subi	r30, 0x7C	; 124
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	44 f4       	brge	.+16     	; 0x170c <LCD_sendCommand+0x142>
		__ticks = 1;
    16fc:	fe 01       	movw	r30, r28
    16fe:	ee 57       	subi	r30, 0x7E	; 126
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	64 c0       	rjmp	.+200    	; 0x17d4 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    170c:	fe 01       	movw	r30, r28
    170e:	ec 57       	subi	r30, 0x7C	; 124
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	0c f0       	brlt	.+2      	; 0x172c <LCD_sendCommand+0x162>
    172a:	43 c0       	rjmp	.+134    	; 0x17b2 <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172c:	fe 01       	movw	r30, r28
    172e:	e8 57       	subi	r30, 0x78	; 120
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8e 01       	movw	r16, r28
    174c:	0e 57       	subi	r16, 0x7E	; 126
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	f8 01       	movw	r30, r16
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	1f c0       	rjmp	.+62     	; 0x17a2 <LCD_sendCommand+0x1d8>
    1764:	fe 01       	movw	r30, r28
    1766:	e0 58       	subi	r30, 0x80	; 128
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 e9       	ldi	r24, 0x90	; 144
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    1772:	fe 01       	movw	r30, r28
    1774:	e0 58       	subi	r30, 0x80	; 128
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_sendCommand+0x1b2>
    1780:	fe 01       	movw	r30, r28
    1782:	e0 58       	subi	r30, 0x80	; 128
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	de 01       	movw	r26, r28
    178c:	ae 57       	subi	r26, 0x7E	; 126
    178e:	bf 4f       	sbci	r27, 0xFF	; 255
    1790:	fe 01       	movw	r30, r28
    1792:	ee 57       	subi	r30, 0x7E	; 126
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	9c 93       	st	X, r25
    17a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	fe 01       	movw	r30, r28
    17a4:	ee 57       	subi	r30, 0x7E	; 126
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	d1 f6       	brne	.-76     	; 0x1764 <LCD_sendCommand+0x19a>
    17b0:	4b c0       	rjmp	.+150    	; 0x1848 <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	8e 01       	movw	r16, r28
    17b4:	0e 57       	subi	r16, 0x7E	; 126
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	fe 01       	movw	r30, r28
    17ba:	ec 57       	subi	r30, 0x7C	; 124
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	f8 01       	movw	r30, r16
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	80 83       	st	Z, r24
    17d4:	de 01       	movw	r26, r28
    17d6:	a2 58       	subi	r26, 0x82	; 130
    17d8:	bf 4f       	sbci	r27, 0xFF	; 255
    17da:	fe 01       	movw	r30, r28
    17dc:	ee 57       	subi	r30, 0x7E	; 126
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	9c 93       	st	X, r25
    17e8:	8e 93       	st	-X, r24
    17ea:	fe 01       	movw	r30, r28
    17ec:	e2 58       	subi	r30, 0x82	; 130
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCD_sendCommand+0x22a>
    17f8:	fe 01       	movw	r30, r28
    17fa:	e2 58       	subi	r30, 0x82	; 130
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	22 c0       	rjmp	.+68     	; 0x1848 <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1804:	8e 01       	movw	r16, r28
    1806:	04 57       	subi	r16, 0x74	; 116
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	fe 01       	movw	r30, r28
    180c:	e3 57       	subi	r30, 0x73	; 115
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	f8 01       	movw	r30, r16
    1822:	80 83       	st	Z, r24
    1824:	de 01       	movw	r26, r28
    1826:	a3 58       	subi	r26, 0x83	; 131
    1828:	bf 4f       	sbci	r27, 0xFF	; 255
    182a:	fe 01       	movw	r30, r28
    182c:	e4 57       	subi	r30, 0x74	; 116
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1834:	fe 01       	movw	r30, r28
    1836:	e3 58       	subi	r30, 0x83	; 131
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	8a 95       	dec	r24
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_sendCommand+0x272>
    1840:	fe 01       	movw	r30, r28
    1842:	e3 58       	subi	r30, 0x83	; 131
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	62 e0       	ldi	r22, 0x02	; 2
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    1852:	fe 01       	movw	r30, r28
    1854:	e7 58       	subi	r30, 0x87	; 135
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e8       	ldi	r26, 0x80	; 128
    185e:	bf e3       	ldi	r27, 0x3F	; 63
    1860:	80 83       	st	Z, r24
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	a2 83       	std	Z+2, r26	; 0x02
    1866:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1868:	8e 01       	movw	r16, r28
    186a:	0b 58       	subi	r16, 0x8B	; 139
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	fe 01       	movw	r30, r28
    1870:	e7 58       	subi	r30, 0x87	; 135
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	2b ea       	ldi	r18, 0xAB	; 171
    187e:	3a ea       	ldi	r19, 0xAA	; 170
    1880:	4a ea       	ldi	r20, 0xAA	; 170
    1882:	50 e4       	ldi	r21, 0x40	; 64
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	f8 01       	movw	r30, r16
    188e:	80 83       	st	Z, r24
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	a2 83       	std	Z+2, r26	; 0x02
    1894:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1896:	fe 01       	movw	r30, r28
    1898:	eb 58       	subi	r30, 0x8B	; 139
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	34 f4       	brge	.+12     	; 0x18c0 <LCD_sendCommand+0x2f6>
		__ticks = 1;
    18b4:	fe 01       	movw	r30, r28
    18b6:	ec 58       	subi	r30, 0x8C	; 140
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	80 83       	st	Z, r24
    18be:	e0 c0       	rjmp	.+448    	; 0x1a80 <LCD_sendCommand+0x4b6>
	else if (__tmp > 255)
    18c0:	fe 01       	movw	r30, r28
    18c2:	eb 58       	subi	r30, 0x8B	; 139
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	53 e4       	ldi	r21, 0x43	; 67
    18d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	0c f0       	brlt	.+2      	; 0x18e0 <LCD_sendCommand+0x316>
    18de:	c0 c0       	rjmp	.+384    	; 0x1a60 <LCD_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    18e0:	fe 01       	movw	r30, r28
    18e2:	e7 58       	subi	r30, 0x87	; 135
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a e7       	ldi	r20, 0x7A	; 122
    18f4:	54 e4       	ldi	r21, 0x44	; 68
    18f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	fe 01       	movw	r30, r28
    1900:	e0 59       	subi	r30, 0x90	; 144
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 83       	st	Z, r24
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	a2 83       	std	Z+2, r26	; 0x02
    190a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	8e 01       	movw	r16, r28
    190e:	04 59       	subi	r16, 0x94	; 148
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	fe 01       	movw	r30, r28
    1914:	e0 59       	subi	r30, 0x90	; 144
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a e7       	ldi	r20, 0x7A	; 122
    1926:	55 e4       	ldi	r21, 0x45	; 69
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	f8 01       	movw	r30, r16
    1932:	80 83       	st	Z, r24
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	a2 83       	std	Z+2, r26	; 0x02
    1938:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    193a:	fe 01       	movw	r30, r28
    193c:	e4 59       	subi	r30, 0x94	; 148
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1954:	88 23       	and	r24, r24
    1956:	44 f4       	brge	.+16     	; 0x1968 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1958:	fe 01       	movw	r30, r28
    195a:	e6 59       	subi	r30, 0x96	; 150
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	64 c0       	rjmp	.+200    	; 0x1a30 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1968:	fe 01       	movw	r30, r28
    196a:	e4 59       	subi	r30, 0x94	; 148
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	3f ef       	ldi	r19, 0xFF	; 255
    197a:	4f e7       	ldi	r20, 0x7F	; 127
    197c:	57 e4       	ldi	r21, 0x47	; 71
    197e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1982:	18 16       	cp	r1, r24
    1984:	0c f0       	brlt	.+2      	; 0x1988 <LCD_sendCommand+0x3be>
    1986:	43 c0       	rjmp	.+134    	; 0x1a0e <LCD_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1988:	fe 01       	movw	r30, r28
    198a:	e0 59       	subi	r30, 0x90	; 144
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8e 01       	movw	r16, r28
    19a8:	06 59       	subi	r16, 0x96	; 150
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	f8 01       	movw	r30, r16
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
    19be:	1f c0       	rjmp	.+62     	; 0x19fe <LCD_sendCommand+0x434>
    19c0:	fe 01       	movw	r30, r28
    19c2:	e8 59       	subi	r30, 0x98	; 152
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 e9       	ldi	r24, 0x90	; 144
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ce:	fe 01       	movw	r30, r28
    19d0:	e8 59       	subi	r30, 0x98	; 152
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_sendCommand+0x40e>
    19dc:	fe 01       	movw	r30, r28
    19de:	e8 59       	subi	r30, 0x98	; 152
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	de 01       	movw	r26, r28
    19e8:	a6 59       	subi	r26, 0x96	; 150
    19ea:	bf 4f       	sbci	r27, 0xFF	; 255
    19ec:	fe 01       	movw	r30, r28
    19ee:	e6 59       	subi	r30, 0x96	; 150
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	11 96       	adiw	r26, 0x01	; 1
    19fa:	9c 93       	st	X, r25
    19fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	fe 01       	movw	r30, r28
    1a00:	e6 59       	subi	r30, 0x96	; 150
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	d1 f6       	brne	.-76     	; 0x19c0 <LCD_sendCommand+0x3f6>
    1a0c:	4b c0       	rjmp	.+150    	; 0x1aa4 <LCD_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0e:	8e 01       	movw	r16, r28
    1a10:	06 59       	subi	r16, 0x96	; 150
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	fe 01       	movw	r30, r28
    1a16:	e4 59       	subi	r30, 0x94	; 148
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	de 01       	movw	r26, r28
    1a32:	aa 59       	subi	r26, 0x9A	; 154
    1a34:	bf 4f       	sbci	r27, 0xFF	; 255
    1a36:	fe 01       	movw	r30, r28
    1a38:	e6 59       	subi	r30, 0x96	; 150
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	11 96       	adiw	r26, 0x01	; 1
    1a42:	9c 93       	st	X, r25
    1a44:	8e 93       	st	-X, r24
    1a46:	fe 01       	movw	r30, r28
    1a48:	ea 59       	subi	r30, 0x9A	; 154
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_sendCommand+0x486>
    1a54:	fe 01       	movw	r30, r28
    1a56:	ea 59       	subi	r30, 0x9A	; 154
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
    1a5e:	22 c0       	rjmp	.+68     	; 0x1aa4 <LCD_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a60:	8e 01       	movw	r16, r28
    1a62:	0c 58       	subi	r16, 0x8C	; 140
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	fe 01       	movw	r30, r28
    1a68:	eb 58       	subi	r30, 0x8B	; 139
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	80 83       	st	Z, r24
    1a80:	de 01       	movw	r26, r28
    1a82:	ab 59       	subi	r26, 0x9B	; 155
    1a84:	bf 4f       	sbci	r27, 0xFF	; 255
    1a86:	fe 01       	movw	r30, r28
    1a88:	ec 58       	subi	r30, 0x8C	; 140
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a90:	fe 01       	movw	r30, r28
    1a92:	eb 59       	subi	r30, 0x9B	; 155
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 81       	ld	r24, Z
    1a98:	8a 95       	dec	r24
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_sendCommand+0x4ce>
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	eb 59       	subi	r30, 0x9B	; 155
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 83       	st	Z, r24
	_delay_us(1);

	#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,4));
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	eb 56       	subi	r30, 0x6B	; 107
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	82 95       	swap	r24
    1aae:	8f 70       	andi	r24, 0x0F	; 15
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	91 70       	andi	r25, 0x01	; 1
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	63 e0       	ldi	r22, 0x03	; 3
    1ab8:	49 2f       	mov	r20, r25
    1aba:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,5));
    1abe:	fe 01       	movw	r30, r28
    1ac0:	eb 56       	subi	r30, 0x6B	; 107
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	82 95       	swap	r24
    1ac8:	86 95       	lsr	r24
    1aca:	87 70       	andi	r24, 0x07	; 7
    1acc:	98 2f       	mov	r25, r24
    1ace:	91 70       	andi	r25, 0x01	; 1
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	64 e0       	ldi	r22, 0x04	; 4
    1ad4:	49 2f       	mov	r20, r25
    1ad6:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,6));
    1ada:	fe 01       	movw	r30, r28
    1adc:	eb 56       	subi	r30, 0x6B	; 107
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	82 95       	swap	r24
    1ae4:	86 95       	lsr	r24
    1ae6:	86 95       	lsr	r24
    1ae8:	83 70       	andi	r24, 0x03	; 3
    1aea:	98 2f       	mov	r25, r24
    1aec:	91 70       	andi	r25, 0x01	; 1
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	65 e0       	ldi	r22, 0x05	; 5
    1af2:	49 2f       	mov	r20, r25
    1af4:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,7));
    1af8:	fe 01       	movw	r30, r28
    1afa:	eb 56       	subi	r30, 0x6B	; 107
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 81       	ld	r24, Z
    1b00:	98 2f       	mov	r25, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	99 27       	eor	r25, r25
    1b06:	99 1f       	adc	r25, r25
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	66 e0       	ldi	r22, 0x06	; 6
    1b0c:	49 2f       	mov	r20, r25
    1b0e:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    1b12:	fe 01       	movw	r30, r28
    1b14:	ef 59       	subi	r30, 0x9F	; 159
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e8       	ldi	r26, 0x80	; 128
    1b1e:	bf e3       	ldi	r27, 0x3F	; 63
    1b20:	80 83       	st	Z, r24
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	a2 83       	std	Z+2, r26	; 0x02
    1b26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	8e 01       	movw	r16, r28
    1b2a:	03 5a       	subi	r16, 0xA3	; 163
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ef 59       	subi	r30, 0x9F	; 159
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a e7       	ldi	r20, 0x7A	; 122
    1b42:	55 e4       	ldi	r21, 0x45	; 69
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b56:	fe 01       	movw	r30, r28
    1b58:	e3 5a       	subi	r30, 0xA3	; 163
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	44 f4       	brge	.+16     	; 0x1b84 <LCD_sendCommand+0x5ba>
		__ticks = 1;
    1b74:	fe 01       	movw	r30, r28
    1b76:	e5 5a       	subi	r30, 0xA5	; 165
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	64 c0       	rjmp	.+200    	; 0x1c4c <LCD_sendCommand+0x682>
	else if (__tmp > 65535)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e3 5a       	subi	r30, 0xA3	; 163
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	0c f0       	brlt	.+2      	; 0x1ba4 <LCD_sendCommand+0x5da>
    1ba2:	43 c0       	rjmp	.+134    	; 0x1c2a <LCD_sendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ef 59       	subi	r30, 0x9F	; 159
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8e 01       	movw	r16, r28
    1bc4:	05 5a       	subi	r16, 0xA5	; 165
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	1f c0       	rjmp	.+62     	; 0x1c1a <LCD_sendCommand+0x650>
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e7 5a       	subi	r30, 0xA7	; 167
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 e9       	ldi	r24, 0x90	; 144
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bea:	fe 01       	movw	r30, r28
    1bec:	e7 5a       	subi	r30, 0xA7	; 167
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_sendCommand+0x62a>
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e7 5a       	subi	r30, 0xA7	; 167
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	de 01       	movw	r26, r28
    1c04:	a5 5a       	subi	r26, 0xA5	; 165
    1c06:	bf 4f       	sbci	r27, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e5 5a       	subi	r30, 0xA5	; 165
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	11 96       	adiw	r26, 0x01	; 1
    1c16:	9c 93       	st	X, r25
    1c18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e5 5a       	subi	r30, 0xA5	; 165
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	d1 f6       	brne	.-76     	; 0x1bdc <LCD_sendCommand+0x612>
    1c28:	27 c0       	rjmp	.+78     	; 0x1c78 <LCD_sendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	05 5a       	subi	r16, 0xA5	; 165
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	fe 01       	movw	r30, r28
    1c32:	e3 5a       	subi	r30, 0xA3	; 163
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	f8 01       	movw	r30, r16
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	de 01       	movw	r26, r28
    1c4e:	a9 5a       	subi	r26, 0xA9	; 169
    1c50:	bf 4f       	sbci	r27, 0xFF	; 255
    1c52:	fe 01       	movw	r30, r28
    1c54:	e5 5a       	subi	r30, 0xA5	; 165
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	8d 93       	st	X+, r24
    1c5e:	9c 93       	st	X, r25
    1c60:	fe 01       	movw	r30, r28
    1c62:	e9 5a       	subi	r30, 0xA9	; 169
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_sendCommand+0x6a0>
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e9 5a       	subi	r30, 0xA9	; 169
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    1c82:	fe 01       	movw	r30, r28
    1c84:	ed 5a       	subi	r30, 0xAD	; 173
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e8       	ldi	r26, 0x80	; 128
    1c8e:	bf e3       	ldi	r27, 0x3F	; 63
    1c90:	80 83       	st	Z, r24
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	a2 83       	std	Z+2, r26	; 0x02
    1c96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c98:	8e 01       	movw	r16, r28
    1c9a:	01 5b       	subi	r16, 0xB1	; 177
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 5a       	subi	r30, 0xAD	; 173
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	2b ea       	ldi	r18, 0xAB	; 171
    1cae:	3a ea       	ldi	r19, 0xAA	; 170
    1cb0:	4a ea       	ldi	r20, 0xAA	; 170
    1cb2:	50 e4       	ldi	r21, 0x40	; 64
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e1 5b       	subi	r30, 0xB1	; 177
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	34 f4       	brge	.+12     	; 0x1cf0 <LCD_sendCommand+0x726>
		__ticks = 1;
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e2 5b       	subi	r30, 0xB2	; 178
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	80 83       	st	Z, r24
    1cee:	e0 c0       	rjmp	.+448    	; 0x1eb0 <LCD_sendCommand+0x8e6>
	else if (__tmp > 255)
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e1 5b       	subi	r30, 0xB1	; 177
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	53 e4       	ldi	r21, 0x43	; 67
    1d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	0c f0       	brlt	.+2      	; 0x1d10 <LCD_sendCommand+0x746>
    1d0e:	c0 c0       	rjmp	.+384    	; 0x1e90 <LCD_sendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    1d10:	fe 01       	movw	r30, r28
    1d12:	ed 5a       	subi	r30, 0xAD	; 173
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4a e7       	ldi	r20, 0x7A	; 122
    1d24:	54 e4       	ldi	r21, 0x44	; 68
    1d26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e6 5b       	subi	r30, 0xB6	; 182
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 83       	st	Z, r24
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	a2 83       	std	Z+2, r26	; 0x02
    1d3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	0a 5b       	subi	r16, 0xBA	; 186
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	fe 01       	movw	r30, r28
    1d44:	e6 5b       	subi	r30, 0xB6	; 182
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a e7       	ldi	r20, 0x7A	; 122
    1d56:	55 e4       	ldi	r21, 0x45	; 69
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	f8 01       	movw	r30, r16
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	a2 83       	std	Z+2, r26	; 0x02
    1d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ea 5b       	subi	r30, 0xBA	; 186
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	44 f4       	brge	.+16     	; 0x1d98 <LCD_sendCommand+0x7ce>
		__ticks = 1;
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ec 5b       	subi	r30, 0xBC	; 188
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
    1d96:	64 c0       	rjmp	.+200    	; 0x1e60 <LCD_sendCommand+0x896>
	else if (__tmp > 65535)
    1d98:	fe 01       	movw	r30, r28
    1d9a:	ea 5b       	subi	r30, 0xBA	; 186
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	60 81       	ld	r22, Z
    1da0:	71 81       	ldd	r23, Z+1	; 0x01
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	3f ef       	ldi	r19, 0xFF	; 255
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	57 e4       	ldi	r21, 0x47	; 71
    1dae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	0c f0       	brlt	.+2      	; 0x1db8 <LCD_sendCommand+0x7ee>
    1db6:	43 c0       	rjmp	.+134    	; 0x1e3e <LCD_sendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	fe 01       	movw	r30, r28
    1dba:	e6 5b       	subi	r30, 0xB6	; 182
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8e 01       	movw	r16, r28
    1dd8:	0c 5b       	subi	r16, 0xBC	; 188
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	f8 01       	movw	r30, r16
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	1f c0       	rjmp	.+62     	; 0x1e2e <LCD_sendCommand+0x864>
    1df0:	fe 01       	movw	r30, r28
    1df2:	ee 5b       	subi	r30, 0xBE	; 190
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 e9       	ldi	r24, 0x90	; 144
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ee 5b       	subi	r30, 0xBE	; 190
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_sendCommand+0x83e>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ee 5b       	subi	r30, 0xBE	; 190
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e16:	de 01       	movw	r26, r28
    1e18:	ac 5b       	subi	r26, 0xBC	; 188
    1e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ec 5b       	subi	r30, 0xBC	; 188
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	11 96       	adiw	r26, 0x01	; 1
    1e2a:	9c 93       	st	X, r25
    1e2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ec 5b       	subi	r30, 0xBC	; 188
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	d1 f6       	brne	.-76     	; 0x1df0 <LCD_sendCommand+0x826>
    1e3c:	42 c0       	rjmp	.+132    	; 0x1ec2 <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	8e 01       	movw	r16, r28
    1e40:	0c 5b       	subi	r16, 0xBC	; 188
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	ea 5b       	subi	r30, 0xBA	; 186
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
    1e60:	de 01       	movw	r26, r28
    1e62:	a0 5c       	subi	r26, 0xC0	; 192
    1e64:	bf 4f       	sbci	r27, 0xFF	; 255
    1e66:	fe 01       	movw	r30, r28
    1e68:	ec 5b       	subi	r30, 0xBC	; 188
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	9c 93       	st	X, r25
    1e74:	8e 93       	st	-X, r24
    1e76:	fe 01       	movw	r30, r28
    1e78:	e0 5c       	subi	r30, 0xC0	; 192
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_sendCommand+0x8b6>
    1e84:	fe 01       	movw	r30, r28
    1e86:	e0 5c       	subi	r30, 0xC0	; 192
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
    1e8e:	19 c0       	rjmp	.+50     	; 0x1ec2 <LCD_sendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e90:	8e 01       	movw	r16, r28
    1e92:	02 5b       	subi	r16, 0xB2	; 178
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e1 5b       	subi	r30, 0xB1	; 177
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	f8 01       	movw	r30, r16
    1eae:	80 83       	st	Z, r24
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e2 5b       	subi	r30, 0xB2	; 178
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eba:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ebc:	8a 95       	dec	r24
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_sendCommand+0x8f2>
    1ec0:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	62 e0       	ldi	r22, 0x02	; 2
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e8       	ldi	r26, 0x80	; 128
    1ed2:	bf e3       	ldi	r27, 0x3F	; 63
    1ed4:	8b af       	std	Y+59, r24	; 0x3b
    1ed6:	9c af       	std	Y+60, r25	; 0x3c
    1ed8:	ad af       	std	Y+61, r26	; 0x3d
    1eda:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1edc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ede:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ee0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ee2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ee4:	2b ea       	ldi	r18, 0xAB	; 171
    1ee6:	3a ea       	ldi	r19, 0xAA	; 170
    1ee8:	4a ea       	ldi	r20, 0xAA	; 170
    1eea:	50 e4       	ldi	r21, 0x40	; 64
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8f ab       	std	Y+55, r24	; 0x37
    1ef6:	98 af       	std	Y+56, r25	; 0x38
    1ef8:	a9 af       	std	Y+57, r26	; 0x39
    1efa:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1efc:	6f a9       	ldd	r22, Y+55	; 0x37
    1efe:	78 ad       	ldd	r23, Y+56	; 0x38
    1f00:	89 ad       	ldd	r24, Y+57	; 0x39
    1f02:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	1c f4       	brge	.+6      	; 0x1f1a <LCD_sendCommand+0x950>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	8e ab       	std	Y+54, r24	; 0x36
    1f18:	91 c0       	rjmp	.+290    	; 0x203c <LCD_sendCommand+0xa72>
	else if (__tmp > 255)
    1f1a:	6f a9       	ldd	r22, Y+55	; 0x37
    1f1c:	78 ad       	ldd	r23, Y+56	; 0x38
    1f1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	53 e4       	ldi	r21, 0x43	; 67
    1f2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <LCD_sendCommand+0x96a>
    1f32:	7b c0       	rjmp	.+246    	; 0x202a <LCD_sendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    1f34:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f36:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a e7       	ldi	r20, 0x7A	; 122
    1f42:	54 e4       	ldi	r21, 0x44	; 68
    1f44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8a ab       	std	Y+50, r24	; 0x32
    1f4e:	9b ab       	std	Y+51, r25	; 0x33
    1f50:	ac ab       	std	Y+52, r26	; 0x34
    1f52:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	6a a9       	ldd	r22, Y+50	; 0x32
    1f56:	7b a9       	ldd	r23, Y+51	; 0x33
    1f58:	8c a9       	ldd	r24, Y+52	; 0x34
    1f5a:	9d a9       	ldd	r25, Y+53	; 0x35
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a e7       	ldi	r20, 0x7A	; 122
    1f62:	55 e4       	ldi	r21, 0x45	; 69
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8e a7       	std	Y+46, r24	; 0x2e
    1f6e:	9f a7       	std	Y+47, r25	; 0x2f
    1f70:	a8 ab       	std	Y+48, r26	; 0x30
    1f72:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1f74:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f76:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f78:	88 a9       	ldd	r24, Y+48	; 0x30
    1f7a:	99 a9       	ldd	r25, Y+49	; 0x31
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <LCD_sendCommand+0x9cc>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9d a7       	std	Y+45, r25	; 0x2d
    1f92:	8c a7       	std	Y+44, r24	; 0x2c
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <LCD_sendCommand+0xa4a>
	else if (__tmp > 65535)
    1f96:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f98:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f9a:	88 a9       	ldd	r24, Y+48	; 0x30
    1f9c:	99 a9       	ldd	r25, Y+49	; 0x31
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <LCD_sendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	6a a9       	ldd	r22, Y+50	; 0x32
    1fb0:	7b a9       	ldd	r23, Y+51	; 0x33
    1fb2:	8c a9       	ldd	r24, Y+52	; 0x34
    1fb4:	9d a9       	ldd	r25, Y+53	; 0x35
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9d a7       	std	Y+45, r25	; 0x2d
    1fd4:	8c a7       	std	Y+44, r24	; 0x2c
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <LCD_sendCommand+0xa2c>
    1fd8:	80 e9       	ldi	r24, 0x90	; 144
    1fda:	91 e0       	ldi	r25, 0x01	; 1
    1fdc:	9b a7       	std	Y+43, r25	; 0x2b
    1fde:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1fe2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_sendCommand+0xa1a>
    1fe8:	9b a7       	std	Y+43, r25	; 0x2b
    1fea:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fee:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9d a7       	std	Y+45, r25	; 0x2d
    1ff4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ff8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <LCD_sendCommand+0xa0e>
    1ffe:	24 c0       	rjmp	.+72     	; 0x2048 <LCD_sendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6e a5       	ldd	r22, Y+46	; 0x2e
    2002:	7f a5       	ldd	r23, Y+47	; 0x2f
    2004:	88 a9       	ldd	r24, Y+48	; 0x30
    2006:	99 a9       	ldd	r25, Y+49	; 0x31
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9d a7       	std	Y+45, r25	; 0x2d
    2012:	8c a7       	std	Y+44, r24	; 0x2c
    2014:	8c a5       	ldd	r24, Y+44	; 0x2c
    2016:	9d a5       	ldd	r25, Y+45	; 0x2d
    2018:	99 a7       	std	Y+41, r25	; 0x29
    201a:	88 a7       	std	Y+40, r24	; 0x28
    201c:	88 a5       	ldd	r24, Y+40	; 0x28
    201e:	99 a5       	ldd	r25, Y+41	; 0x29
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_sendCommand+0xa56>
    2024:	99 a7       	std	Y+41, r25	; 0x29
    2026:	88 a7       	std	Y+40, r24	; 0x28
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <LCD_sendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    202a:	6f a9       	ldd	r22, Y+55	; 0x37
    202c:	78 ad       	ldd	r23, Y+56	; 0x38
    202e:	89 ad       	ldd	r24, Y+57	; 0x39
    2030:	9a ad       	ldd	r25, Y+58	; 0x3a
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8e ab       	std	Y+54, r24	; 0x36
    203c:	8e a9       	ldd	r24, Y+54	; 0x36
    203e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2040:	8f a1       	ldd	r24, Y+39	; 0x27
    2042:	8a 95       	dec	r24
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_sendCommand+0xa78>
    2046:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,0));
    2048:	fe 01       	movw	r30, r28
    204a:	eb 56       	subi	r30, 0x6B	; 107
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	98 2f       	mov	r25, r24
    2052:	91 70       	andi	r25, 0x01	; 1
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	63 e0       	ldi	r22, 0x03	; 3
    2058:	49 2f       	mov	r20, r25
    205a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,1));
    205e:	fe 01       	movw	r30, r28
    2060:	eb 56       	subi	r30, 0x6B	; 107
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	86 95       	lsr	r24
    2068:	98 2f       	mov	r25, r24
    206a:	91 70       	andi	r25, 0x01	; 1
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	64 e0       	ldi	r22, 0x04	; 4
    2070:	49 2f       	mov	r20, r25
    2072:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,2));
    2076:	fe 01       	movw	r30, r28
    2078:	eb 56       	subi	r30, 0x6B	; 107
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	86 95       	lsr	r24
    2080:	86 95       	lsr	r24
    2082:	98 2f       	mov	r25, r24
    2084:	91 70       	andi	r25, 0x01	; 1
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	65 e0       	ldi	r22, 0x05	; 5
    208a:	49 2f       	mov	r20, r25
    208c:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,3));
    2090:	fe 01       	movw	r30, r28
    2092:	eb 56       	subi	r30, 0x6B	; 107
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	86 95       	lsr	r24
    209a:	86 95       	lsr	r24
    209c:	86 95       	lsr	r24
    209e:	98 2f       	mov	r25, r24
    20a0:	91 70       	andi	r25, 0x01	; 1
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	66 e0       	ldi	r22, 0x06	; 6
    20a6:	49 2f       	mov	r20, r25
    20a8:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf e3       	ldi	r27, 0x3F	; 63
    20b4:	8b a3       	std	Y+35, r24	; 0x23
    20b6:	9c a3       	std	Y+36, r25	; 0x24
    20b8:	ad a3       	std	Y+37, r26	; 0x25
    20ba:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b a1       	ldd	r22, Y+35	; 0x23
    20be:	7c a1       	ldd	r23, Y+36	; 0x24
    20c0:	8d a1       	ldd	r24, Y+37	; 0x25
    20c2:	9e a1       	ldd	r25, Y+38	; 0x26
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	55 e4       	ldi	r21, 0x45	; 69
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 8f       	std	Y+31, r24	; 0x1f
    20d6:	98 a3       	std	Y+32, r25	; 0x20
    20d8:	a9 a3       	std	Y+33, r26	; 0x21
    20da:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    20dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20de:	78 a1       	ldd	r23, Y+32	; 0x20
    20e0:	89 a1       	ldd	r24, Y+33	; 0x21
    20e2:	9a a1       	ldd	r25, Y+34	; 0x22
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_sendCommand+0xb34>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 8f       	std	Y+30, r25	; 0x1e
    20fa:	8d 8f       	std	Y+29, r24	; 0x1d
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_sendCommand+0xbb2>
	else if (__tmp > 65535)
    20fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2100:	78 a1       	ldd	r23, Y+32	; 0x20
    2102:	89 a1       	ldd	r24, Y+33	; 0x21
    2104:	9a a1       	ldd	r25, Y+34	; 0x22
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_sendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b a1       	ldd	r22, Y+35	; 0x23
    2118:	7c a1       	ldd	r23, Y+36	; 0x24
    211a:	8d a1       	ldd	r24, Y+37	; 0x25
    211c:	9e a1       	ldd	r25, Y+38	; 0x26
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 8f       	std	Y+30, r25	; 0x1e
    213c:	8d 8f       	std	Y+29, r24	; 0x1d
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_sendCommand+0xb94>
    2140:	80 e9       	ldi	r24, 0x90	; 144
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	9c 8f       	std	Y+28, r25	; 0x1c
    2146:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_sendCommand+0xb82>
    2150:	9c 8f       	std	Y+28, r25	; 0x1c
    2152:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2156:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 8f       	std	Y+30, r25	; 0x1e
    215c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2160:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_sendCommand+0xb76>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <LCD_sendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 8d       	ldd	r22, Y+31	; 0x1f
    216a:	78 a1       	ldd	r23, Y+32	; 0x20
    216c:	89 a1       	ldd	r24, Y+33	; 0x21
    216e:	9a a1       	ldd	r25, Y+34	; 0x22
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 8f       	std	Y+30, r25	; 0x1e
    217a:	8d 8f       	std	Y+29, r24	; 0x1d
    217c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2180:	9a 8f       	std	Y+26, r25	; 0x1a
    2182:	89 8f       	std	Y+25, r24	; 0x19
    2184:	89 8d       	ldd	r24, Y+25	; 0x19
    2186:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_sendCommand+0xbbe>
    218c:	9a 8f       	std	Y+26, r25	; 0x1a
    218e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	62 e0       	ldi	r22, 0x02	; 2
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e8       	ldi	r26, 0x80	; 128
    21a0:	bf e3       	ldi	r27, 0x3F	; 63
    21a2:	8d 8b       	std	Y+21, r24	; 0x15
    21a4:	9e 8b       	std	Y+22, r25	; 0x16
    21a6:	af 8b       	std	Y+23, r26	; 0x17
    21a8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21aa:	6d 89       	ldd	r22, Y+21	; 0x15
    21ac:	7e 89       	ldd	r23, Y+22	; 0x16
    21ae:	8f 89       	ldd	r24, Y+23	; 0x17
    21b0:	98 8d       	ldd	r25, Y+24	; 0x18
    21b2:	2b ea       	ldi	r18, 0xAB	; 171
    21b4:	3a ea       	ldi	r19, 0xAA	; 170
    21b6:	4a ea       	ldi	r20, 0xAA	; 170
    21b8:	50 e4       	ldi	r21, 0x40	; 64
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	89 8b       	std	Y+17, r24	; 0x11
    21c4:	9a 8b       	std	Y+18, r25	; 0x12
    21c6:	ab 8b       	std	Y+19, r26	; 0x13
    21c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21ca:	69 89       	ldd	r22, Y+17	; 0x11
    21cc:	7a 89       	ldd	r23, Y+18	; 0x12
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	1c f4       	brge	.+6      	; 0x21e8 <LCD_sendCommand+0xc1e>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	88 8b       	std	Y+16, r24	; 0x10
    21e6:	91 c0       	rjmp	.+290    	; 0x230a <LCD_sendCommand+0xd40>
	else if (__tmp > 255)
    21e8:	69 89       	ldd	r22, Y+17	; 0x11
    21ea:	7a 89       	ldd	r23, Y+18	; 0x12
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4f e7       	ldi	r20, 0x7F	; 127
    21f6:	53 e4       	ldi	r21, 0x43	; 67
    21f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	0c f0       	brlt	.+2      	; 0x2202 <LCD_sendCommand+0xc38>
    2200:	7b c0       	rjmp	.+246    	; 0x22f8 <LCD_sendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    2202:	6d 89       	ldd	r22, Y+21	; 0x15
    2204:	7e 89       	ldd	r23, Y+22	; 0x16
    2206:	8f 89       	ldd	r24, Y+23	; 0x17
    2208:	98 8d       	ldd	r25, Y+24	; 0x18
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	4a e7       	ldi	r20, 0x7A	; 122
    2210:	54 e4       	ldi	r21, 0x44	; 68
    2212:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8c 87       	std	Y+12, r24	; 0x0c
    221c:	9d 87       	std	Y+13, r25	; 0x0d
    221e:	ae 87       	std	Y+14, r26	; 0x0e
    2220:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6c 85       	ldd	r22, Y+12	; 0x0c
    2224:	7d 85       	ldd	r23, Y+13	; 0x0d
    2226:	8e 85       	ldd	r24, Y+14	; 0x0e
    2228:	9f 85       	ldd	r25, Y+15	; 0x0f
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a e7       	ldi	r20, 0x7A	; 122
    2230:	55 e4       	ldi	r21, 0x45	; 69
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	88 87       	std	Y+8, r24	; 0x08
    223c:	99 87       	std	Y+9, r25	; 0x09
    223e:	aa 87       	std	Y+10, r26	; 0x0a
    2240:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2242:	68 85       	ldd	r22, Y+8	; 0x08
    2244:	79 85       	ldd	r23, Y+9	; 0x09
    2246:	8a 85       	ldd	r24, Y+10	; 0x0a
    2248:	9b 85       	ldd	r25, Y+11	; 0x0b
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <LCD_sendCommand+0xc9a>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9f 83       	std	Y+7, r25	; 0x07
    2260:	8e 83       	std	Y+6, r24	; 0x06
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <LCD_sendCommand+0xd18>
	else if (__tmp > 65535)
    2264:	68 85       	ldd	r22, Y+8	; 0x08
    2266:	79 85       	ldd	r23, Y+9	; 0x09
    2268:	8a 85       	ldd	r24, Y+10	; 0x0a
    226a:	9b 85       	ldd	r25, Y+11	; 0x0b
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <LCD_sendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6c 85       	ldd	r22, Y+12	; 0x0c
    227e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2280:	8e 85       	ldd	r24, Y+14	; 0x0e
    2282:	9f 85       	ldd	r25, Y+15	; 0x0f
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9f 83       	std	Y+7, r25	; 0x07
    22a2:	8e 83       	std	Y+6, r24	; 0x06
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <LCD_sendCommand+0xcfa>
    22a6:	80 e9       	ldi	r24, 0x90	; 144
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	9d 83       	std	Y+5, r25	; 0x05
    22ac:	8c 83       	std	Y+4, r24	; 0x04
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	9d 81       	ldd	r25, Y+5	; 0x05
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_sendCommand+0xce8>
    22b6:	9d 83       	std	Y+5, r25	; 0x05
    22b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	9f 81       	ldd	r25, Y+7	; 0x07
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9f 83       	std	Y+7, r25	; 0x07
    22c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8e 81       	ldd	r24, Y+6	; 0x06
    22c6:	9f 81       	ldd	r25, Y+7	; 0x07
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <LCD_sendCommand+0xcdc>
    22cc:	24 c0       	rjmp	.+72     	; 0x2316 <LCD_sendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	68 85       	ldd	r22, Y+8	; 0x08
    22d0:	79 85       	ldd	r23, Y+9	; 0x09
    22d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9f 83       	std	Y+7, r25	; 0x07
    22e0:	8e 83       	std	Y+6, r24	; 0x06
    22e2:	8e 81       	ldd	r24, Y+6	; 0x06
    22e4:	9f 81       	ldd	r25, Y+7	; 0x07
    22e6:	9b 83       	std	Y+3, r25	; 0x03
    22e8:	8a 83       	std	Y+2, r24	; 0x02
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	9b 81       	ldd	r25, Y+3	; 0x03
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_sendCommand+0xd24>
    22f2:	9b 83       	std	Y+3, r25	; 0x03
    22f4:	8a 83       	std	Y+2, r24	; 0x02
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <LCD_sendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22f8:	69 89       	ldd	r22, Y+17	; 0x11
    22fa:	7a 89       	ldd	r23, Y+18	; 0x12
    22fc:	8b 89       	ldd	r24, Y+19	; 0x13
    22fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	88 8b       	std	Y+16, r24	; 0x10
    230a:	88 89       	ldd	r24, Y+16	; 0x10
    230c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	8a 95       	dec	r24
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_sendCommand+0xd46>
    2314:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2316:	cb 56       	subi	r28, 0x6B	; 107
    2318:	df 4f       	sbci	r29, 0xFF	; 255
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	08 95       	ret

0000232e <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint_8 data)
{
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	c1 58       	subi	r28, 0x81	; 129
    233c:	d0 40       	sbci	r29, 0x00	; 0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	fe 01       	movw	r30, r28
    234a:	ef 57       	subi	r30, 0x7F	; 127
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writepin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	61 e0       	ldi	r22, 0x01	; 1
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    235a:	fe 01       	movw	r30, r28
    235c:	e3 58       	subi	r30, 0x83	; 131
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a0 e8       	ldi	r26, 0x80	; 128
    2366:	bf e3       	ldi	r27, 0x3F	; 63
    2368:	80 83       	st	Z, r24
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	a2 83       	std	Z+2, r26	; 0x02
    236e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	8e 01       	movw	r16, r28
    2372:	07 58       	subi	r16, 0x87	; 135
    2374:	1f 4f       	sbci	r17, 0xFF	; 255
    2376:	fe 01       	movw	r30, r28
    2378:	e3 58       	subi	r30, 0x83	; 131
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a e7       	ldi	r20, 0x7A	; 122
    238a:	55 e4       	ldi	r21, 0x45	; 69
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	f8 01       	movw	r30, r16
    2396:	80 83       	st	Z, r24
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	a2 83       	std	Z+2, r26	; 0x02
    239c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 58       	subi	r30, 0x87	; 135
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	60 81       	ld	r22, Z
    23a6:	71 81       	ldd	r23, Z+1	; 0x01
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	93 81       	ldd	r25, Z+3	; 0x03
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	44 f4       	brge	.+16     	; 0x23cc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    23bc:	fe 01       	movw	r30, r28
    23be:	e9 58       	subi	r30, 0x89	; 137
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
    23ca:	64 c0       	rjmp	.+200    	; 0x2494 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    23cc:	fe 01       	movw	r30, r28
    23ce:	e7 58       	subi	r30, 0x87	; 135
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	0c f0       	brlt	.+2      	; 0x23ec <LCD_displayCharacter+0xbe>
    23ea:	43 c0       	rjmp	.+134    	; 0x2472 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	fe 01       	movw	r30, r28
    23ee:	e3 58       	subi	r30, 0x83	; 131
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	8e 01       	movw	r16, r28
    240c:	09 58       	subi	r16, 0x89	; 137
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	f8 01       	movw	r30, r16
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	1f c0       	rjmp	.+62     	; 0x2462 <LCD_displayCharacter+0x134>
    2424:	fe 01       	movw	r30, r28
    2426:	eb 58       	subi	r30, 0x8B	; 139
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	80 e9       	ldi	r24, 0x90	; 144
    242c:	91 e0       	ldi	r25, 0x01	; 1
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2432:	fe 01       	movw	r30, r28
    2434:	eb 58       	subi	r30, 0x8B	; 139
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_displayCharacter+0x10e>
    2440:	fe 01       	movw	r30, r28
    2442:	eb 58       	subi	r30, 0x8B	; 139
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	de 01       	movw	r26, r28
    244c:	a9 58       	subi	r26, 0x89	; 137
    244e:	bf 4f       	sbci	r27, 0xFF	; 255
    2450:	fe 01       	movw	r30, r28
    2452:	e9 58       	subi	r30, 0x89	; 137
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	11 96       	adiw	r26, 0x01	; 1
    245e:	9c 93       	st	X, r25
    2460:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	fe 01       	movw	r30, r28
    2464:	e9 58       	subi	r30, 0x89	; 137
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	d1 f6       	brne	.-76     	; 0x2424 <LCD_displayCharacter+0xf6>
    2470:	27 c0       	rjmp	.+78     	; 0x24c0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2472:	8e 01       	movw	r16, r28
    2474:	09 58       	subi	r16, 0x89	; 137
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	fe 01       	movw	r30, r28
    247a:	e7 58       	subi	r30, 0x87	; 135
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	de 01       	movw	r26, r28
    2496:	ad 58       	subi	r26, 0x8D	; 141
    2498:	bf 4f       	sbci	r27, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	e9 58       	subi	r30, 0x89	; 137
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	8d 93       	st	X+, r24
    24a6:	9c 93       	st	X, r25
    24a8:	fe 01       	movw	r30, r28
    24aa:	ed 58       	subi	r30, 0x8D	; 141
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <LCD_displayCharacter+0x184>
    24b6:	fe 01       	movw	r30, r28
    24b8:	ed 58       	subi	r30, 0x8D	; 141
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	62 e0       	ldi	r22, 0x02	; 2
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    24ca:	fe 01       	movw	r30, r28
    24cc:	e1 59       	subi	r30, 0x91	; 145
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 e8       	ldi	r26, 0x80	; 128
    24d6:	bf e3       	ldi	r27, 0x3F	; 63
    24d8:	80 83       	st	Z, r24
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	a2 83       	std	Z+2, r26	; 0x02
    24de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	8e 01       	movw	r16, r28
    24e2:	05 59       	subi	r16, 0x95	; 149
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	fe 01       	movw	r30, r28
    24e8:	e1 59       	subi	r30, 0x91	; 145
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a e7       	ldi	r20, 0x7A	; 122
    24fa:	55 e4       	ldi	r21, 0x45	; 69
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	f8 01       	movw	r30, r16
    2506:	80 83       	st	Z, r24
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	a2 83       	std	Z+2, r26	; 0x02
    250c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250e:	fe 01       	movw	r30, r28
    2510:	e5 59       	subi	r30, 0x95	; 149
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	44 f4       	brge	.+16     	; 0x253c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    252c:	fe 01       	movw	r30, r28
    252e:	e7 59       	subi	r30, 0x97	; 151
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
    253a:	64 c0       	rjmp	.+200    	; 0x2604 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    253c:	fe 01       	movw	r30, r28
    253e:	e5 59       	subi	r30, 0x95	; 149
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	0c f0       	brlt	.+2      	; 0x255c <LCD_displayCharacter+0x22e>
    255a:	43 c0       	rjmp	.+134    	; 0x25e2 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	fe 01       	movw	r30, r28
    255e:	e1 59       	subi	r30, 0x91	; 145
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	60 81       	ld	r22, Z
    2564:	71 81       	ldd	r23, Z+1	; 0x01
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	8e 01       	movw	r16, r28
    257c:	07 59       	subi	r16, 0x97	; 151
    257e:	1f 4f       	sbci	r17, 0xFF	; 255
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	f8 01       	movw	r30, r16
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
    2592:	1f c0       	rjmp	.+62     	; 0x25d2 <LCD_displayCharacter+0x2a4>
    2594:	fe 01       	movw	r30, r28
    2596:	e9 59       	subi	r30, 0x99	; 153
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 e9       	ldi	r24, 0x90	; 144
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24
    25a2:	fe 01       	movw	r30, r28
    25a4:	e9 59       	subi	r30, 0x99	; 153
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_displayCharacter+0x27e>
    25b0:	fe 01       	movw	r30, r28
    25b2:	e9 59       	subi	r30, 0x99	; 153
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	de 01       	movw	r26, r28
    25bc:	a7 59       	subi	r26, 0x97	; 151
    25be:	bf 4f       	sbci	r27, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	e7 59       	subi	r30, 0x97	; 151
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	9c 93       	st	X, r25
    25d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	fe 01       	movw	r30, r28
    25d4:	e7 59       	subi	r30, 0x97	; 151
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	d1 f6       	brne	.-76     	; 0x2594 <LCD_displayCharacter+0x266>
    25e0:	27 c0       	rjmp	.+78     	; 0x2630 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	8e 01       	movw	r16, r28
    25e4:	07 59       	subi	r16, 0x97	; 151
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	e5 59       	subi	r30, 0x95	; 149
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	f8 01       	movw	r30, r16
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	de 01       	movw	r26, r28
    2606:	ab 59       	subi	r26, 0x9B	; 155
    2608:	bf 4f       	sbci	r27, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	e7 59       	subi	r30, 0x97	; 151
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	8d 93       	st	X+, r24
    2616:	9c 93       	st	X, r25
    2618:	fe 01       	movw	r30, r28
    261a:	eb 59       	subi	r30, 0x9B	; 155
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 81       	ld	r24, Z
    2620:	91 81       	ldd	r25, Z+1	; 0x01
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_displayCharacter+0x2f4>
    2626:	fe 01       	movw	r30, r28
    2628:	eb 59       	subi	r30, 0x9B	; 155
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
	_delay_us(1);

#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,4));
    2630:	fe 01       	movw	r30, r28
    2632:	ef 57       	subi	r30, 0x7F	; 127
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	82 95       	swap	r24
    263a:	8f 70       	andi	r24, 0x0F	; 15
    263c:	98 2f       	mov	r25, r24
    263e:	91 70       	andi	r25, 0x01	; 1
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	63 e0       	ldi	r22, 0x03	; 3
    2644:	49 2f       	mov	r20, r25
    2646:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,5));
    264a:	fe 01       	movw	r30, r28
    264c:	ef 57       	subi	r30, 0x7F	; 127
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	82 95       	swap	r24
    2654:	86 95       	lsr	r24
    2656:	87 70       	andi	r24, 0x07	; 7
    2658:	98 2f       	mov	r25, r24
    265a:	91 70       	andi	r25, 0x01	; 1
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	64 e0       	ldi	r22, 0x04	; 4
    2660:	49 2f       	mov	r20, r25
    2662:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,6));
    2666:	fe 01       	movw	r30, r28
    2668:	ef 57       	subi	r30, 0x7F	; 127
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	82 95       	swap	r24
    2670:	86 95       	lsr	r24
    2672:	86 95       	lsr	r24
    2674:	83 70       	andi	r24, 0x03	; 3
    2676:	98 2f       	mov	r25, r24
    2678:	91 70       	andi	r25, 0x01	; 1
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	65 e0       	ldi	r22, 0x05	; 5
    267e:	49 2f       	mov	r20, r25
    2680:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,7));
    2684:	fe 01       	movw	r30, r28
    2686:	ef 57       	subi	r30, 0x7F	; 127
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	98 2f       	mov	r25, r24
    268e:	99 1f       	adc	r25, r25
    2690:	99 27       	eor	r25, r25
    2692:	99 1f       	adc	r25, r25
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	66 e0       	ldi	r22, 0x06	; 6
    2698:	49 2f       	mov	r20, r25
    269a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    269e:	fe 01       	movw	r30, r28
    26a0:	ef 59       	subi	r30, 0x9F	; 159
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	a0 e8       	ldi	r26, 0x80	; 128
    26aa:	bf e3       	ldi	r27, 0x3F	; 63
    26ac:	80 83       	st	Z, r24
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	a2 83       	std	Z+2, r26	; 0x02
    26b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b4:	8e 01       	movw	r16, r28
    26b6:	03 5a       	subi	r16, 0xA3	; 163
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	fe 01       	movw	r30, r28
    26bc:	ef 59       	subi	r30, 0x9F	; 159
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	60 81       	ld	r22, Z
    26c2:	71 81       	ldd	r23, Z+1	; 0x01
    26c4:	82 81       	ldd	r24, Z+2	; 0x02
    26c6:	93 81       	ldd	r25, Z+3	; 0x03
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a e7       	ldi	r20, 0x7A	; 122
    26ce:	55 e4       	ldi	r21, 0x45	; 69
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	f8 01       	movw	r30, r16
    26da:	80 83       	st	Z, r24
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	a2 83       	std	Z+2, r26	; 0x02
    26e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e2:	fe 01       	movw	r30, r28
    26e4:	e3 5a       	subi	r30, 0xA3	; 163
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e8       	ldi	r20, 0x80	; 128
    26f6:	5f e3       	ldi	r21, 0x3F	; 63
    26f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26fc:	88 23       	and	r24, r24
    26fe:	44 f4       	brge	.+16     	; 0x2710 <LCD_displayCharacter+0x3e2>
		__ticks = 1;
    2700:	fe 01       	movw	r30, r28
    2702:	e5 5a       	subi	r30, 0xA5	; 165
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
    270e:	64 c0       	rjmp	.+200    	; 0x27d8 <LCD_displayCharacter+0x4aa>
	else if (__tmp > 65535)
    2710:	fe 01       	movw	r30, r28
    2712:	e3 5a       	subi	r30, 0xA3	; 163
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	60 81       	ld	r22, Z
    2718:	71 81       	ldd	r23, Z+1	; 0x01
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	0c f0       	brlt	.+2      	; 0x2730 <LCD_displayCharacter+0x402>
    272e:	43 c0       	rjmp	.+134    	; 0x27b6 <LCD_displayCharacter+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	fe 01       	movw	r30, r28
    2732:	ef 59       	subi	r30, 0x9F	; 159
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e2       	ldi	r20, 0x20	; 32
    2744:	51 e4       	ldi	r21, 0x41	; 65
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8e 01       	movw	r16, r28
    2750:	05 5a       	subi	r16, 0xA5	; 165
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	f8 01       	movw	r30, r16
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	80 83       	st	Z, r24
    2766:	1f c0       	rjmp	.+62     	; 0x27a6 <LCD_displayCharacter+0x478>
    2768:	fe 01       	movw	r30, r28
    276a:	e7 5a       	subi	r30, 0xA7	; 167
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 e9       	ldi	r24, 0x90	; 144
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	fe 01       	movw	r30, r28
    2778:	e7 5a       	subi	r30, 0xA7	; 167
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <LCD_displayCharacter+0x452>
    2784:	fe 01       	movw	r30, r28
    2786:	e7 5a       	subi	r30, 0xA7	; 167
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278e:	de 01       	movw	r26, r28
    2790:	a5 5a       	subi	r26, 0xA5	; 165
    2792:	bf 4f       	sbci	r27, 0xFF	; 255
    2794:	fe 01       	movw	r30, r28
    2796:	e5 5a       	subi	r30, 0xA5	; 165
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	9c 93       	st	X, r25
    27a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	fe 01       	movw	r30, r28
    27a8:	e5 5a       	subi	r30, 0xA5	; 165
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	d1 f6       	brne	.-76     	; 0x2768 <LCD_displayCharacter+0x43a>
    27b4:	27 c0       	rjmp	.+78     	; 0x2804 <LCD_displayCharacter+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b6:	8e 01       	movw	r16, r28
    27b8:	05 5a       	subi	r16, 0xA5	; 165
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	fe 01       	movw	r30, r28
    27be:	e3 5a       	subi	r30, 0xA3	; 163
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	f8 01       	movw	r30, r16
    27d4:	91 83       	std	Z+1, r25	; 0x01
    27d6:	80 83       	st	Z, r24
    27d8:	de 01       	movw	r26, r28
    27da:	a9 5a       	subi	r26, 0xA9	; 169
    27dc:	bf 4f       	sbci	r27, 0xFF	; 255
    27de:	fe 01       	movw	r30, r28
    27e0:	e5 5a       	subi	r30, 0xA5	; 165
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	8d 93       	st	X+, r24
    27ea:	9c 93       	st	X, r25
    27ec:	fe 01       	movw	r30, r28
    27ee:	e9 5a       	subi	r30, 0xA9	; 169
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_displayCharacter+0x4c8>
    27fa:	fe 01       	movw	r30, r28
    27fc:	e9 5a       	subi	r30, 0xA9	; 169
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	62 e0       	ldi	r22, 0x02	; 2
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    280e:	fe 01       	movw	r30, r28
    2810:	ed 5a       	subi	r30, 0xAD	; 173
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e8       	ldi	r26, 0x80	; 128
    281a:	bf e3       	ldi	r27, 0x3F	; 63
    281c:	80 83       	st	Z, r24
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	a2 83       	std	Z+2, r26	; 0x02
    2822:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2824:	8e 01       	movw	r16, r28
    2826:	01 5b       	subi	r16, 0xB1	; 177
    2828:	1f 4f       	sbci	r17, 0xFF	; 255
    282a:	fe 01       	movw	r30, r28
    282c:	ed 5a       	subi	r30, 0xAD	; 173
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	2b ea       	ldi	r18, 0xAB	; 171
    283a:	3a ea       	ldi	r19, 0xAA	; 170
    283c:	4a ea       	ldi	r20, 0xAA	; 170
    283e:	50 e4       	ldi	r21, 0x40	; 64
    2840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	f8 01       	movw	r30, r16
    284a:	80 83       	st	Z, r24
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	a2 83       	std	Z+2, r26	; 0x02
    2850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2852:	fe 01       	movw	r30, r28
    2854:	e1 5b       	subi	r30, 0xB1	; 177
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	60 81       	ld	r22, Z
    285a:	71 81       	ldd	r23, Z+1	; 0x01
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	93 81       	ldd	r25, Z+3	; 0x03
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	34 f4       	brge	.+12     	; 0x287c <LCD_displayCharacter+0x54e>
		__ticks = 1;
    2870:	fe 01       	movw	r30, r28
    2872:	e2 5b       	subi	r30, 0xB2	; 178
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	80 83       	st	Z, r24
    287a:	e0 c0       	rjmp	.+448    	; 0x2a3c <LCD_displayCharacter+0x70e>
	else if (__tmp > 255)
    287c:	fe 01       	movw	r30, r28
    287e:	e1 5b       	subi	r30, 0xB1	; 177
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	53 e4       	ldi	r21, 0x43	; 67
    2892:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	0c f0       	brlt	.+2      	; 0x289c <LCD_displayCharacter+0x56e>
    289a:	c0 c0       	rjmp	.+384    	; 0x2a1c <LCD_displayCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    289c:	fe 01       	movw	r30, r28
    289e:	ed 5a       	subi	r30, 0xAD	; 173
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4a e7       	ldi	r20, 0x7A	; 122
    28b0:	54 e4       	ldi	r21, 0x44	; 68
    28b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	fe 01       	movw	r30, r28
    28bc:	e6 5b       	subi	r30, 0xB6	; 182
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 83       	st	Z, r24
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	a2 83       	std	Z+2, r26	; 0x02
    28c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c8:	8e 01       	movw	r16, r28
    28ca:	0a 5b       	subi	r16, 0xBA	; 186
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
    28ce:	fe 01       	movw	r30, r28
    28d0:	e6 5b       	subi	r30, 0xB6	; 182
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	4a e7       	ldi	r20, 0x7A	; 122
    28e2:	55 e4       	ldi	r21, 0x45	; 69
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	f8 01       	movw	r30, r16
    28ee:	80 83       	st	Z, r24
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	a2 83       	std	Z+2, r26	; 0x02
    28f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28f6:	fe 01       	movw	r30, r28
    28f8:	ea 5b       	subi	r30, 0xBA	; 186
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 e8       	ldi	r20, 0x80	; 128
    290a:	5f e3       	ldi	r21, 0x3F	; 63
    290c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2910:	88 23       	and	r24, r24
    2912:	44 f4       	brge	.+16     	; 0x2924 <LCD_displayCharacter+0x5f6>
		__ticks = 1;
    2914:	fe 01       	movw	r30, r28
    2916:	ec 5b       	subi	r30, 0xBC	; 188
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
    2922:	64 c0       	rjmp	.+200    	; 0x29ec <LCD_displayCharacter+0x6be>
	else if (__tmp > 65535)
    2924:	fe 01       	movw	r30, r28
    2926:	ea 5b       	subi	r30, 0xBA	; 186
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 81       	ld	r22, Z
    292c:	71 81       	ldd	r23, Z+1	; 0x01
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	0c f0       	brlt	.+2      	; 0x2944 <LCD_displayCharacter+0x616>
    2942:	43 c0       	rjmp	.+134    	; 0x29ca <LCD_displayCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2944:	fe 01       	movw	r30, r28
    2946:	e6 5b       	subi	r30, 0xB6	; 182
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	8e 01       	movw	r16, r28
    2964:	0c 5b       	subi	r16, 0xBC	; 188
    2966:	1f 4f       	sbci	r17, 0xFF	; 255
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	f8 01       	movw	r30, r16
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
    297a:	1f c0       	rjmp	.+62     	; 0x29ba <LCD_displayCharacter+0x68c>
    297c:	fe 01       	movw	r30, r28
    297e:	ee 5b       	subi	r30, 0xBE	; 190
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 e9       	ldi	r24, 0x90	; 144
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
    298a:	fe 01       	movw	r30, r28
    298c:	ee 5b       	subi	r30, 0xBE	; 190
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_displayCharacter+0x666>
    2998:	fe 01       	movw	r30, r28
    299a:	ee 5b       	subi	r30, 0xBE	; 190
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a2:	de 01       	movw	r26, r28
    29a4:	ac 5b       	subi	r26, 0xBC	; 188
    29a6:	bf 4f       	sbci	r27, 0xFF	; 255
    29a8:	fe 01       	movw	r30, r28
    29aa:	ec 5b       	subi	r30, 0xBC	; 188
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	11 96       	adiw	r26, 0x01	; 1
    29b6:	9c 93       	st	X, r25
    29b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ba:	fe 01       	movw	r30, r28
    29bc:	ec 5b       	subi	r30, 0xBC	; 188
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	d1 f6       	brne	.-76     	; 0x297c <LCD_displayCharacter+0x64e>
    29c8:	42 c0       	rjmp	.+132    	; 0x2a4e <LCD_displayCharacter+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	8e 01       	movw	r16, r28
    29cc:	0c 5b       	subi	r16, 0xBC	; 188
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	fe 01       	movw	r30, r28
    29d2:	ea 5b       	subi	r30, 0xBA	; 186
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	f8 01       	movw	r30, r16
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
    29ec:	de 01       	movw	r26, r28
    29ee:	a0 5c       	subi	r26, 0xC0	; 192
    29f0:	bf 4f       	sbci	r27, 0xFF	; 255
    29f2:	fe 01       	movw	r30, r28
    29f4:	ec 5b       	subi	r30, 0xBC	; 188
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	11 96       	adiw	r26, 0x01	; 1
    29fe:	9c 93       	st	X, r25
    2a00:	8e 93       	st	-X, r24
    2a02:	fe 01       	movw	r30, r28
    2a04:	e0 5c       	subi	r30, 0xC0	; 192
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_displayCharacter+0x6de>
    2a10:	fe 01       	movw	r30, r28
    2a12:	e0 5c       	subi	r30, 0xC0	; 192
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
    2a1a:	19 c0       	rjmp	.+50     	; 0x2a4e <LCD_displayCharacter+0x720>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a1c:	8e 01       	movw	r16, r28
    2a1e:	02 5b       	subi	r16, 0xB2	; 178
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	fe 01       	movw	r30, r28
    2a24:	e1 5b       	subi	r30, 0xB1	; 177
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	f8 01       	movw	r30, r16
    2a3a:	80 83       	st	Z, r24
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e2 5b       	subi	r30, 0xB2	; 178
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a46:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a48:	8a 95       	dec	r24
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <LCD_displayCharacter+0x71a>
    2a4c:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	62 e0       	ldi	r22, 0x02	; 2
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	a0 e8       	ldi	r26, 0x80	; 128
    2a5e:	bf e3       	ldi	r27, 0x3F	; 63
    2a60:	8b af       	std	Y+59, r24	; 0x3b
    2a62:	9c af       	std	Y+60, r25	; 0x3c
    2a64:	ad af       	std	Y+61, r26	; 0x3d
    2a66:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a68:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a6a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a70:	2b ea       	ldi	r18, 0xAB	; 171
    2a72:	3a ea       	ldi	r19, 0xAA	; 170
    2a74:	4a ea       	ldi	r20, 0xAA	; 170
    2a76:	50 e4       	ldi	r21, 0x40	; 64
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8f ab       	std	Y+55, r24	; 0x37
    2a82:	98 af       	std	Y+56, r25	; 0x38
    2a84:	a9 af       	std	Y+57, r26	; 0x39
    2a86:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a88:	6f a9       	ldd	r22, Y+55	; 0x37
    2a8a:	78 ad       	ldd	r23, Y+56	; 0x38
    2a8c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e8       	ldi	r20, 0x80	; 128
    2a96:	5f e3       	ldi	r21, 0x3F	; 63
    2a98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	1c f4       	brge	.+6      	; 0x2aa6 <LCD_displayCharacter+0x778>
		__ticks = 1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	8e ab       	std	Y+54, r24	; 0x36
    2aa4:	91 c0       	rjmp	.+290    	; 0x2bc8 <LCD_displayCharacter+0x89a>
	else if (__tmp > 255)
    2aa6:	6f a9       	ldd	r22, Y+55	; 0x37
    2aa8:	78 ad       	ldd	r23, Y+56	; 0x38
    2aaa:	89 ad       	ldd	r24, Y+57	; 0x39
    2aac:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4f e7       	ldi	r20, 0x7F	; 127
    2ab4:	53 e4       	ldi	r21, 0x43	; 67
    2ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aba:	18 16       	cp	r1, r24
    2abc:	0c f0       	brlt	.+2      	; 0x2ac0 <LCD_displayCharacter+0x792>
    2abe:	7b c0       	rjmp	.+246    	; 0x2bb6 <LCD_displayCharacter+0x888>
	{
		_delay_ms(__us / 1000.0);
    2ac0:	6b ad       	ldd	r22, Y+59	; 0x3b
    2ac2:	7c ad       	ldd	r23, Y+60	; 0x3c
    2ac4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	4a e7       	ldi	r20, 0x7A	; 122
    2ace:	54 e4       	ldi	r21, 0x44	; 68
    2ad0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	8a ab       	std	Y+50, r24	; 0x32
    2ada:	9b ab       	std	Y+51, r25	; 0x33
    2adc:	ac ab       	std	Y+52, r26	; 0x34
    2ade:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	6a a9       	ldd	r22, Y+50	; 0x32
    2ae2:	7b a9       	ldd	r23, Y+51	; 0x33
    2ae4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ae6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a e7       	ldi	r20, 0x7A	; 122
    2aee:	55 e4       	ldi	r21, 0x45	; 69
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8e a7       	std	Y+46, r24	; 0x2e
    2afa:	9f a7       	std	Y+47, r25	; 0x2f
    2afc:	a8 ab       	std	Y+48, r26	; 0x30
    2afe:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2b00:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b02:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b04:	88 a9       	ldd	r24, Y+48	; 0x30
    2b06:	99 a9       	ldd	r25, Y+49	; 0x31
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <LCD_displayCharacter+0x7f4>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9d a7       	std	Y+45, r25	; 0x2d
    2b1e:	8c a7       	std	Y+44, r24	; 0x2c
    2b20:	3f c0       	rjmp	.+126    	; 0x2ba0 <LCD_displayCharacter+0x872>
	else if (__tmp > 65535)
    2b22:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b24:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b26:	88 a9       	ldd	r24, Y+48	; 0x30
    2b28:	99 a9       	ldd	r25, Y+49	; 0x31
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	4c f5       	brge	.+82     	; 0x2b8c <LCD_displayCharacter+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	6a a9       	ldd	r22, Y+50	; 0x32
    2b3c:	7b a9       	ldd	r23, Y+51	; 0x33
    2b3e:	8c a9       	ldd	r24, Y+52	; 0x34
    2b40:	9d a9       	ldd	r25, Y+53	; 0x35
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9d a7       	std	Y+45, r25	; 0x2d
    2b60:	8c a7       	std	Y+44, r24	; 0x2c
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <LCD_displayCharacter+0x854>
    2b64:	80 e9       	ldi	r24, 0x90	; 144
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	9b a7       	std	Y+43, r25	; 0x2b
    2b6a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b6c:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b6e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <LCD_displayCharacter+0x842>
    2b74:	9b a7       	std	Y+43, r25	; 0x2b
    2b76:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b7a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9d a7       	std	Y+45, r25	; 0x2d
    2b80:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b84:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	69 f7       	brne	.-38     	; 0x2b64 <LCD_displayCharacter+0x836>
    2b8a:	24 c0       	rjmp	.+72     	; 0x2bd4 <LCD_displayCharacter+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b8e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b90:	88 a9       	ldd	r24, Y+48	; 0x30
    2b92:	99 a9       	ldd	r25, Y+49	; 0x31
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9d a7       	std	Y+45, r25	; 0x2d
    2b9e:	8c a7       	std	Y+44, r24	; 0x2c
    2ba0:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ba2:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ba4:	99 a7       	std	Y+41, r25	; 0x29
    2ba6:	88 a7       	std	Y+40, r24	; 0x28
    2ba8:	88 a5       	ldd	r24, Y+40	; 0x28
    2baa:	99 a5       	ldd	r25, Y+41	; 0x29
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <LCD_displayCharacter+0x87e>
    2bb0:	99 a7       	std	Y+41, r25	; 0x29
    2bb2:	88 a7       	std	Y+40, r24	; 0x28
    2bb4:	0f c0       	rjmp	.+30     	; 0x2bd4 <LCD_displayCharacter+0x8a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bb6:	6f a9       	ldd	r22, Y+55	; 0x37
    2bb8:	78 ad       	ldd	r23, Y+56	; 0x38
    2bba:	89 ad       	ldd	r24, Y+57	; 0x39
    2bbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	8e ab       	std	Y+54, r24	; 0x36
    2bc8:	8e a9       	ldd	r24, Y+54	; 0x36
    2bca:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bcc:	8f a1       	ldd	r24, Y+39	; 0x27
    2bce:	8a 95       	dec	r24
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <LCD_displayCharacter+0x8a0>
    2bd2:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,0));
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ef 57       	subi	r30, 0x7F	; 127
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	98 2f       	mov	r25, r24
    2bde:	91 70       	andi	r25, 0x01	; 1
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	63 e0       	ldi	r22, 0x03	; 3
    2be4:	49 2f       	mov	r20, r25
    2be6:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,1));
    2bea:	fe 01       	movw	r30, r28
    2bec:	ef 57       	subi	r30, 0x7F	; 127
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	86 95       	lsr	r24
    2bf4:	98 2f       	mov	r25, r24
    2bf6:	91 70       	andi	r25, 0x01	; 1
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	64 e0       	ldi	r22, 0x04	; 4
    2bfc:	49 2f       	mov	r20, r25
    2bfe:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,2));
    2c02:	fe 01       	movw	r30, r28
    2c04:	ef 57       	subi	r30, 0x7F	; 127
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 81       	ld	r24, Z
    2c0a:	86 95       	lsr	r24
    2c0c:	86 95       	lsr	r24
    2c0e:	98 2f       	mov	r25, r24
    2c10:	91 70       	andi	r25, 0x01	; 1
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	65 e0       	ldi	r22, 0x05	; 5
    2c16:	49 2f       	mov	r20, r25
    2c18:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
	GPIO_writepin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,3));
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ef 57       	subi	r30, 0x7F	; 127
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	86 95       	lsr	r24
    2c26:	86 95       	lsr	r24
    2c28:	86 95       	lsr	r24
    2c2a:	98 2f       	mov	r25, r24
    2c2c:	91 70       	andi	r25, 0x01	; 1
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	66 e0       	ldi	r22, 0x06	; 6
    2c32:	49 2f       	mov	r20, r25
    2c34:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a0 e8       	ldi	r26, 0x80	; 128
    2c3e:	bf e3       	ldi	r27, 0x3F	; 63
    2c40:	8b a3       	std	Y+35, r24	; 0x23
    2c42:	9c a3       	std	Y+36, r25	; 0x24
    2c44:	ad a3       	std	Y+37, r26	; 0x25
    2c46:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a e7       	ldi	r20, 0x7A	; 122
    2c56:	55 e4       	ldi	r21, 0x45	; 69
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8f 8f       	std	Y+31, r24	; 0x1f
    2c62:	98 a3       	std	Y+32, r25	; 0x20
    2c64:	a9 a3       	std	Y+33, r26	; 0x21
    2c66:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2c68:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c6a:	78 a1       	ldd	r23, Y+32	; 0x20
    2c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <LCD_displayCharacter+0x95c>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9e 8f       	std	Y+30, r25	; 0x1e
    2c86:	8d 8f       	std	Y+29, r24	; 0x1d
    2c88:	3f c0       	rjmp	.+126    	; 0x2d08 <LCD_displayCharacter+0x9da>
	else if (__tmp > 65535)
    2c8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c8c:	78 a1       	ldd	r23, Y+32	; 0x20
    2c8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c90:	9a a1       	ldd	r25, Y+34	; 0x22
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	4c f5       	brge	.+82     	; 0x2cf4 <LCD_displayCharacter+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ca8:	9e a1       	ldd	r25, Y+38	; 0x26
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc8:	8d 8f       	std	Y+29, r24	; 0x1d
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <LCD_displayCharacter+0x9bc>
    2ccc:	80 e9       	ldi	r24, 0x90	; 144
    2cce:	91 e0       	ldi	r25, 0x01	; 1
    2cd0:	9c 8f       	std	Y+28, r25	; 0x1c
    2cd2:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_displayCharacter+0x9aa>
    2cdc:	9c 8f       	std	Y+28, r25	; 0x1c
    2cde:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <LCD_displayCharacter+0x99e>
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <LCD_displayCharacter+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cf6:	78 a1       	ldd	r23, Y+32	; 0x20
    2cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9e 8f       	std	Y+30, r25	; 0x1e
    2d06:	8d 8f       	std	Y+29, r24	; 0x1d
    2d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d0c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d0e:	89 8f       	std	Y+25, r24	; 0x19
    2d10:	89 8d       	ldd	r24, Y+25	; 0x19
    2d12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_displayCharacter+0x9e6>
    2d18:	9a 8f       	std	Y+26, r25	; 0x1a
    2d1a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writepin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	62 e0       	ldi	r22, 0x02	; 2
    2d20:	40 e0       	ldi	r20, 0x00	; 0
    2d22:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a0 e8       	ldi	r26, 0x80	; 128
    2d2c:	bf e3       	ldi	r27, 0x3F	; 63
    2d2e:	8d 8b       	std	Y+21, r24	; 0x15
    2d30:	9e 8b       	std	Y+22, r25	; 0x16
    2d32:	af 8b       	std	Y+23, r26	; 0x17
    2d34:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d36:	6d 89       	ldd	r22, Y+21	; 0x15
    2d38:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3e:	2b ea       	ldi	r18, 0xAB	; 171
    2d40:	3a ea       	ldi	r19, 0xAA	; 170
    2d42:	4a ea       	ldi	r20, 0xAA	; 170
    2d44:	50 e4       	ldi	r21, 0x40	; 64
    2d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	89 8b       	std	Y+17, r24	; 0x11
    2d50:	9a 8b       	std	Y+18, r25	; 0x12
    2d52:	ab 8b       	std	Y+19, r26	; 0x13
    2d54:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d56:	69 89       	ldd	r22, Y+17	; 0x11
    2d58:	7a 89       	ldd	r23, Y+18	; 0x12
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	1c f4       	brge	.+6      	; 0x2d74 <LCD_displayCharacter+0xa46>
		__ticks = 1;
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	88 8b       	std	Y+16, r24	; 0x10
    2d72:	91 c0       	rjmp	.+290    	; 0x2e96 <LCD_displayCharacter+0xb68>
	else if (__tmp > 255)
    2d74:	69 89       	ldd	r22, Y+17	; 0x11
    2d76:	7a 89       	ldd	r23, Y+18	; 0x12
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	53 e4       	ldi	r21, 0x43	; 67
    2d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	0c f0       	brlt	.+2      	; 0x2d8e <LCD_displayCharacter+0xa60>
    2d8c:	7b c0       	rjmp	.+246    	; 0x2e84 <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d90:	7e 89       	ldd	r23, Y+22	; 0x16
    2d92:	8f 89       	ldd	r24, Y+23	; 0x17
    2d94:	98 8d       	ldd	r25, Y+24	; 0x18
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	4a e7       	ldi	r20, 0x7A	; 122
    2d9c:	54 e4       	ldi	r21, 0x44	; 68
    2d9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	8c 87       	std	Y+12, r24	; 0x0c
    2da8:	9d 87       	std	Y+13, r25	; 0x0d
    2daa:	ae 87       	std	Y+14, r26	; 0x0e
    2dac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	6c 85       	ldd	r22, Y+12	; 0x0c
    2db0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2db2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2db4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4a e7       	ldi	r20, 0x7A	; 122
    2dbc:	55 e4       	ldi	r21, 0x45	; 69
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	88 87       	std	Y+8, r24	; 0x08
    2dc8:	99 87       	std	Y+9, r25	; 0x09
    2dca:	aa 87       	std	Y+10, r26	; 0x0a
    2dcc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2dce:	68 85       	ldd	r22, Y+8	; 0x08
    2dd0:	79 85       	ldd	r23, Y+9	; 0x09
    2dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <LCD_displayCharacter+0xac2>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	9f 83       	std	Y+7, r25	; 0x07
    2dec:	8e 83       	std	Y+6, r24	; 0x06
    2dee:	3f c0       	rjmp	.+126    	; 0x2e6e <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    2df0:	68 85       	ldd	r22, Y+8	; 0x08
    2df2:	79 85       	ldd	r23, Y+9	; 0x09
    2df4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2df6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	3f ef       	ldi	r19, 0xFF	; 255
    2dfc:	4f e7       	ldi	r20, 0x7F	; 127
    2dfe:	57 e4       	ldi	r21, 0x47	; 71
    2e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e04:	18 16       	cp	r1, r24
    2e06:	4c f5       	brge	.+82     	; 0x2e5a <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e08:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e2       	ldi	r20, 0x20	; 32
    2e16:	51 e4       	ldi	r21, 0x41	; 65
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9f 83       	std	Y+7, r25	; 0x07
    2e2e:	8e 83       	std	Y+6, r24	; 0x06
    2e30:	0f c0       	rjmp	.+30     	; 0x2e50 <LCD_displayCharacter+0xb22>
    2e32:	80 e9       	ldi	r24, 0x90	; 144
    2e34:	91 e0       	ldi	r25, 0x01	; 1
    2e36:	9d 83       	std	Y+5, r25	; 0x05
    2e38:	8c 83       	std	Y+4, r24	; 0x04
    2e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <LCD_displayCharacter+0xb10>
    2e42:	9d 83       	std	Y+5, r25	; 0x05
    2e44:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	8e 81       	ldd	r24, Y+6	; 0x06
    2e48:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	9f 83       	std	Y+7, r25	; 0x07
    2e4e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e50:	8e 81       	ldd	r24, Y+6	; 0x06
    2e52:	9f 81       	ldd	r25, Y+7	; 0x07
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <LCD_displayCharacter+0xb04>
    2e58:	24 c0       	rjmp	.+72     	; 0x2ea2 <LCD_displayCharacter+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5a:	68 85       	ldd	r22, Y+8	; 0x08
    2e5c:	79 85       	ldd	r23, Y+9	; 0x09
    2e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9f 83       	std	Y+7, r25	; 0x07
    2e6c:	8e 83       	std	Y+6, r24	; 0x06
    2e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e70:	9f 81       	ldd	r25, Y+7	; 0x07
    2e72:	9b 83       	std	Y+3, r25	; 0x03
    2e74:	8a 83       	std	Y+2, r24	; 0x02
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <LCD_displayCharacter+0xb4c>
    2e7e:	9b 83       	std	Y+3, r25	; 0x03
    2e80:	8a 83       	std	Y+2, r24	; 0x02
    2e82:	0f c0       	rjmp	.+30     	; 0x2ea2 <LCD_displayCharacter+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e84:	69 89       	ldd	r22, Y+17	; 0x11
    2e86:	7a 89       	ldd	r23, Y+18	; 0x12
    2e88:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	88 8b       	std	Y+16, r24	; 0x10
    2e96:	88 89       	ldd	r24, Y+16	; 0x10
    2e98:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	8a 95       	dec	r24
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <LCD_displayCharacter+0xb6e>
    2ea0:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2ea2:	cf 57       	subi	r28, 0x7F	; 127
    2ea4:	df 4f       	sbci	r29, 0xFF	; 255
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	08 95       	ret

00002eba <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <LCD_displayString+0x6>
    2ec0:	0f 92       	push	r0
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	9b 83       	std	Y+3, r25	; 0x03
    2ec8:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 i;
	for(i=0;str[i]!='\0';i++)
    2eca:	19 82       	std	Y+1, r1	; 0x01
    2ecc:	0e c0       	rjmp	.+28     	; 0x2eea <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e2 0f       	add	r30, r18
    2edc:	f3 1f       	adc	r31, r19
    2ede:	80 81       	ld	r24, Z
    2ee0:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint_8 i;
	for(i=0;str[i]!='\0';i++)
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	e2 0f       	add	r30, r18
    2ef8:	f3 1f       	adc	r31, r19
    2efa:	80 81       	ld	r24, Z
    2efc:	88 23       	and	r24, r24
    2efe:	39 f7       	brne	.-50     	; 0x2ece <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	62 97       	sbiw	r28, 0x12	; 18
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	9a 8b       	std	Y+18, r25	; 0x12
    2f22:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    2f24:	89 89       	ldd	r24, Y+17	; 0x11
    2f26:	9a 89       	ldd	r25, Y+18	; 0x12
    2f28:	9e 01       	movw	r18, r28
    2f2a:	2f 5f       	subi	r18, 0xFF	; 255
    2f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2e:	b9 01       	movw	r22, r18
    2f30:	4a e0       	ldi	r20, 0x0A	; 10
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	0e 94 b3 20 	call	0x4166	; 0x4166 <itoa>

   LCD_displayString(arr);
    2f38:	ce 01       	movw	r24, r28
    2f3a:	01 96       	adiw	r24, 0x01	; 1
    2f3c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayString>
}
    2f40:	62 96       	adiw	r28, 0x12	; 18
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	08 95       	ret

00002f52 <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint_8 row, uint_8 column)
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	00 d0       	rcall	.+0      	; 0x2f58 <LCD_moveCursor+0x6>
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <LCD_moveCursor+0x8>
    2f5a:	0f 92       	push	r0
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	8a 83       	std	Y+2, r24	; 0x02
    2f62:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint_8 position;
	switch(row)
    2f64:	8a 81       	ldd	r24, Y+2	; 0x02
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	3d 83       	std	Y+5, r19	; 0x05
    2f6c:	2c 83       	std	Y+4, r18	; 0x04
    2f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f70:	9d 81       	ldd	r25, Y+5	; 0x05
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	91 05       	cpc	r25, r1
    2f76:	c1 f0       	breq	.+48     	; 0x2fa8 <LCD_moveCursor+0x56>
    2f78:	2c 81       	ldd	r18, Y+4	; 0x04
    2f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f7c:	22 30       	cpi	r18, 0x02	; 2
    2f7e:	31 05       	cpc	r19, r1
    2f80:	2c f4       	brge	.+10     	; 0x2f8c <LCD_moveCursor+0x3a>
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	9d 81       	ldd	r25, Y+5	; 0x05
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	61 f0       	breq	.+24     	; 0x2fa2 <LCD_moveCursor+0x50>
    2f8a:	19 c0       	rjmp	.+50     	; 0x2fbe <LCD_moveCursor+0x6c>
    2f8c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f8e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f90:	22 30       	cpi	r18, 0x02	; 2
    2f92:	31 05       	cpc	r19, r1
    2f94:	69 f0       	breq	.+26     	; 0x2fb0 <LCD_moveCursor+0x5e>
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9a:	83 30       	cpi	r24, 0x03	; 3
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	61 f0       	breq	.+24     	; 0x2fb8 <LCD_moveCursor+0x66>
    2fa0:	0e c0       	rjmp	.+28     	; 0x2fbe <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	0b c0       	rjmp	.+22     	; 0x2fbe <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	80 5c       	subi	r24, 0xC0	; 192
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	07 c0       	rjmp	.+14     	; 0x2fbe <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	80 5f       	subi	r24, 0xF0	; 240
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	03 c0       	rjmp	.+6      	; 0x2fbe <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	80 5c       	subi	r24, 0xC0	; 192
    2fbc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	80 68       	ori	r24, 0x80	; 128
    2fc2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_sendCommand>
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint_8 row,uint_8 col,const char *Str)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <LCD_displayStringRowColumn+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <LCD_displayStringRowColumn+0x8>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	6a 83       	std	Y+2, r22	; 0x02
    2fe6:	5c 83       	std	Y+4, r21	; 0x04
    2fe8:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	6a 81       	ldd	r22, Y+2	; 0x02
    2fee:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayString>
}
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_sendCommand>
}
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
uint_8 KEYPAD_getPressedKey(void)
{
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	00 d0       	rcall	.+0      	; 0x3022 <KEYPAD_getPressedKey+0x6>
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
	uint_8 row,col;
	GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,INPUT);
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	64 e0       	ldi	r22, 0x04	; 4
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,INPUT);
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	65 e0       	ldi	r22, 0x05	; 5
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,INPUT);
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	66 e0       	ldi	r22, 0x06	; 6
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,INPUT);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	67 e0       	ldi	r22, 0x07	; 7
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>

	GPIO_setpindirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,INPUT);
    304e:	83 e0       	ldi	r24, 0x03	; 3
    3050:	62 e0       	ldi	r22, 0x02	; 2
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,INPUT);
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	63 e0       	ldi	r22, 0x03	; 3
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,INPUT);
    3062:	83 e0       	ldi	r24, 0x03	; 3
    3064:	64 e0       	ldi	r22, 0x04	; 4
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
#if (KEYPAD_NUM_COLS==4)
	GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,INPUT);
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	65 e0       	ldi	r22, 0x05	; 5
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    3076:	1a 82       	std	Y+2, r1	; 0x02
    3078:	3c c0       	rjmp	.+120    	; 0x30f2 <KEYPAD_getPressedKey+0xd6>
		{
			GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT);
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	98 2f       	mov	r25, r24
    307e:	9c 5f       	subi	r25, 0xFC	; 252
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	69 2f       	mov	r22, r25
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
			GPIO_writepin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	98 2f       	mov	r25, r24
    308e:	9c 5f       	subi	r25, 0xFC	; 252
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	69 2f       	mov	r22, r25
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_writepin>

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    309a:	19 82       	std	Y+1, r1	; 0x01
    309c:	1c c0       	rjmp	.+56     	; 0x30d6 <KEYPAD_getPressedKey+0xba>
			{
				if(GPIO_readpin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	98 2f       	mov	r25, r24
    30a2:	9e 5f       	subi	r25, 0xFE	; 254
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	69 2f       	mov	r22, r25
    30a8:	0e 94 33 08 	call	0x1066	; 0x1066 <GPIO_readpin>
    30ac:	88 23       	and	r24, r24
    30ae:	81 f4       	brne	.+32     	; 0x30d0 <KEYPAD_getPressedKey+0xb4>
					#endif

					#elif (KEYPAD_NUM_COLS == 4)

					#ifdef STANDARD_KEYPAD
						return ((row*KEYPAD_NUM_COLS)+col+1);
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	88 2f       	mov	r24, r24
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	98 2f       	mov	r25, r24
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	89 0f       	add	r24, r25
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT);
		}
	}
}
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
		{
			GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT);
			GPIO_writepin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	89 83       	std	Y+1, r24	; 0x01
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	84 30       	cpi	r24, 0x04	; 4
    30da:	08 f3       	brcs	.-62     	; 0x309e <KEYPAD_getPressedKey+0x82>
					#endif
					#endif

				}
			}
			GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT);
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	98 2f       	mov	r25, r24
    30e0:	9c 5f       	subi	r25, 0xFC	; 252
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	69 2f       	mov	r22, r25
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setpindirection>
	GPIO_setpindirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,INPUT);
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    30ec:	8a 81       	ldd	r24, Y+2	; 0x02
    30ee:	8f 5f       	subi	r24, 0xFF	; 255
    30f0:	8a 83       	std	Y+2, r24	; 0x02
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	84 30       	cpi	r24, 0x04	; 4
    30f6:	08 f2       	brcs	.-126    	; 0x307a <KEYPAD_getPressedKey+0x5e>
    30f8:	be cf       	rjmp	.-132    	; 0x3076 <KEYPAD_getPressedKey+0x5a>

000030fa <App_init>:
static void inc_func();               //function to voting
static void instruction_func();       //function to display Instructions
static void reset_func();             //function to Reset System

void App_init()
{
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    3102:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_init>
}
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <App_Welcome_screen>:
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
void App_Welcome_screen()
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	2e 97       	sbiw	r28, 0x0e	; 14
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	f8 94       	cli
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    3120:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
	LCD_displayString("  ...Welcome... ");
    3124:	80 e6       	ldi	r24, 0x60	; 96
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayString>
	LCD_displayStringRowColumn(1,0," Voting Machine");
    312c:	21 e7       	ldi	r18, 0x71	; 113
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	60 e0       	ldi	r22, 0x00	; 0
    3134:	a9 01       	movw	r20, r18
    3136:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	aa e7       	ldi	r26, 0x7A	; 122
    3140:	b4 e4       	ldi	r27, 0x44	; 68
    3142:	8b 87       	std	Y+11, r24	; 0x0b
    3144:	9c 87       	std	Y+12, r25	; 0x0c
    3146:	ad 87       	std	Y+13, r26	; 0x0d
    3148:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	6b 85       	ldd	r22, Y+11	; 0x0b
    314c:	7c 85       	ldd	r23, Y+12	; 0x0c
    314e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3150:	9e 85       	ldd	r25, Y+14	; 0x0e
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a e7       	ldi	r20, 0x7A	; 122
    3158:	55 e4       	ldi	r21, 0x45	; 69
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	8f 83       	std	Y+7, r24	; 0x07
    3164:	98 87       	std	Y+8, r25	; 0x08
    3166:	a9 87       	std	Y+9, r26	; 0x09
    3168:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    316a:	6f 81       	ldd	r22, Y+7	; 0x07
    316c:	78 85       	ldd	r23, Y+8	; 0x08
    316e:	89 85       	ldd	r24, Y+9	; 0x09
    3170:	9a 85       	ldd	r25, Y+10	; 0x0a
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <App_Welcome_screen+0x80>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9e 83       	std	Y+6, r25	; 0x06
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	3f c0       	rjmp	.+126    	; 0x320a <App_Welcome_screen+0xfe>
	else if (__tmp > 65535)
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	3f ef       	ldi	r19, 0xFF	; 255
    3198:	4f e7       	ldi	r20, 0x7F	; 127
    319a:	57 e4       	ldi	r21, 0x47	; 71
    319c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a0:	18 16       	cp	r1, r24
    31a2:	4c f5       	brge	.+82     	; 0x31f6 <App_Welcome_screen+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <App_Welcome_screen+0xe0>
    31ce:	80 e9       	ldi	r24, 0x90	; 144
    31d0:	91 e0       	ldi	r25, 0x01	; 1
    31d2:	9c 83       	std	Y+4, r25	; 0x04
    31d4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31d6:	8b 81       	ldd	r24, Y+3	; 0x03
    31d8:	9c 81       	ldd	r25, Y+4	; 0x04
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <App_Welcome_screen+0xce>
    31de:	9c 83       	std	Y+4, r25	; 0x04
    31e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	9e 81       	ldd	r25, Y+6	; 0x06
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	9e 83       	std	Y+6, r25	; 0x06
    31ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <App_Welcome_screen+0xc2>
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <App_Welcome_screen+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	6f 81       	ldd	r22, Y+7	; 0x07
    31f8:	78 85       	ldd	r23, Y+8	; 0x08
    31fa:	89 85       	ldd	r24, Y+9	; 0x09
    31fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	9a 83       	std	Y+2, r25	; 0x02
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	9a 81       	ldd	r25, Y+2	; 0x02
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <App_Welcome_screen+0x10a>
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	instruction_func();
    321e:	0e 94 1a 19 	call	0x3234	; 0x3234 <instruction_func>
}
    3222:	2e 96       	adiw	r28, 0x0e	; 14
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <instruction_func>:
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
static void instruction_func()
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	ea 97       	sbiw	r28, 0x3a	; 58
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    3248:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Some Instruction");
    324c:	21 e8       	ldi	r18, 0x81	; 129
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	60 e0       	ldi	r22, 0x00	; 0
    3254:	a9 01       	movw	r20, r18
    3256:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e8       	ldi	r25, 0x80	; 128
    325e:	ab eb       	ldi	r26, 0xBB	; 187
    3260:	b4 e4       	ldi	r27, 0x44	; 68
    3262:	8d ab       	std	Y+53, r24	; 0x35
    3264:	9e ab       	std	Y+54, r25	; 0x36
    3266:	af ab       	std	Y+55, r26	; 0x37
    3268:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326a:	6d a9       	ldd	r22, Y+53	; 0x35
    326c:	7e a9       	ldd	r23, Y+54	; 0x36
    326e:	8f a9       	ldd	r24, Y+55	; 0x37
    3270:	98 ad       	ldd	r25, Y+56	; 0x38
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	4a e7       	ldi	r20, 0x7A	; 122
    3278:	55 e4       	ldi	r21, 0x45	; 69
    327a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	89 ab       	std	Y+49, r24	; 0x31
    3284:	9a ab       	std	Y+50, r25	; 0x32
    3286:	ab ab       	std	Y+51, r26	; 0x33
    3288:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    328a:	69 a9       	ldd	r22, Y+49	; 0x31
    328c:	7a a9       	ldd	r23, Y+50	; 0x32
    328e:	8b a9       	ldd	r24, Y+51	; 0x33
    3290:	9c a9       	ldd	r25, Y+52	; 0x34
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e8       	ldi	r20, 0x80	; 128
    3298:	5f e3       	ldi	r21, 0x3F	; 63
    329a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    329e:	88 23       	and	r24, r24
    32a0:	2c f4       	brge	.+10     	; 0x32ac <instruction_func+0x78>
		__ticks = 1;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	98 ab       	std	Y+48, r25	; 0x30
    32a8:	8f a7       	std	Y+47, r24	; 0x2f
    32aa:	3f c0       	rjmp	.+126    	; 0x332a <instruction_func+0xf6>
	else if (__tmp > 65535)
    32ac:	69 a9       	ldd	r22, Y+49	; 0x31
    32ae:	7a a9       	ldd	r23, Y+50	; 0x32
    32b0:	8b a9       	ldd	r24, Y+51	; 0x33
    32b2:	9c a9       	ldd	r25, Y+52	; 0x34
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	3f ef       	ldi	r19, 0xFF	; 255
    32b8:	4f e7       	ldi	r20, 0x7F	; 127
    32ba:	57 e4       	ldi	r21, 0x47	; 71
    32bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c0:	18 16       	cp	r1, r24
    32c2:	4c f5       	brge	.+82     	; 0x3316 <instruction_func+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c4:	6d a9       	ldd	r22, Y+53	; 0x35
    32c6:	7e a9       	ldd	r23, Y+54	; 0x36
    32c8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ca:	98 ad       	ldd	r25, Y+56	; 0x38
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e2       	ldi	r20, 0x20	; 32
    32d2:	51 e4       	ldi	r21, 0x41	; 65
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	bc 01       	movw	r22, r24
    32de:	cd 01       	movw	r24, r26
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	98 ab       	std	Y+48, r25	; 0x30
    32ea:	8f a7       	std	Y+47, r24	; 0x2f
    32ec:	0f c0       	rjmp	.+30     	; 0x330c <instruction_func+0xd8>
    32ee:	80 e9       	ldi	r24, 0x90	; 144
    32f0:	91 e0       	ldi	r25, 0x01	; 1
    32f2:	9e a7       	std	Y+46, r25	; 0x2e
    32f4:	8d a7       	std	Y+45, r24	; 0x2d
    32f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    32f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	f1 f7       	brne	.-4      	; 0x32fa <instruction_func+0xc6>
    32fe:	9e a7       	std	Y+46, r25	; 0x2e
    3300:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3302:	8f a5       	ldd	r24, Y+47	; 0x2f
    3304:	98 a9       	ldd	r25, Y+48	; 0x30
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	98 ab       	std	Y+48, r25	; 0x30
    330a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330c:	8f a5       	ldd	r24, Y+47	; 0x2f
    330e:	98 a9       	ldd	r25, Y+48	; 0x30
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	69 f7       	brne	.-38     	; 0x32ee <instruction_func+0xba>
    3314:	14 c0       	rjmp	.+40     	; 0x333e <instruction_func+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3316:	69 a9       	ldd	r22, Y+49	; 0x31
    3318:	7a a9       	ldd	r23, Y+50	; 0x32
    331a:	8b a9       	ldd	r24, Y+51	; 0x33
    331c:	9c a9       	ldd	r25, Y+52	; 0x34
    331e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	98 ab       	std	Y+48, r25	; 0x30
    3328:	8f a7       	std	Y+47, r24	; 0x2f
    332a:	8f a5       	ldd	r24, Y+47	; 0x2f
    332c:	98 a9       	ldd	r25, Y+48	; 0x30
    332e:	9c a7       	std	Y+44, r25	; 0x2c
    3330:	8b a7       	std	Y+43, r24	; 0x2b
    3332:	8b a5       	ldd	r24, Y+43	; 0x2b
    3334:	9c a5       	ldd	r25, Y+44	; 0x2c
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <instruction_func+0x102>
    333a:	9c a7       	std	Y+44, r25	; 0x2c
    333c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1500);
	LCD_clearScreen();
    333e:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"1:A");
    3342:	22 e9       	ldi	r18, 0x92	; 146
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	a9 01       	movw	r20, r18
    334c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,4,"2:B");
    3350:	26 e9       	ldi	r18, 0x96	; 150
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	64 e0       	ldi	r22, 0x04	; 4
    3358:	a9 01       	movw	r20, r18
    335a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,8,"3:C");
    335e:	2a e9       	ldi	r18, 0x9A	; 154
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	68 e0       	ldi	r22, 0x08	; 8
    3366:	a9 01       	movw	r20, r18
    3368:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,12,"4:D");
    336c:	2e e9       	ldi	r18, 0x9E	; 158
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	6c e0       	ldi	r22, 0x0C	; 12
    3374:	a9 01       	movw	r20, r18
    3376:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Press 1 Continue");
    337a:	22 ea       	ldi	r18, 0xA2	; 162
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	a9 01       	movw	r20, r18
    3384:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>

	uint_8 user_press = KEYPAD_getPressedKey();
    3388:	0e 94 0e 18 	call	0x301c	; 0x301c <KEYPAD_getPressedKey>
    338c:	8a af       	std	Y+58, r24	; 0x3a
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	aa e7       	ldi	r26, 0x7A	; 122
    3394:	b4 e4       	ldi	r27, 0x44	; 68
    3396:	8f a3       	std	Y+39, r24	; 0x27
    3398:	98 a7       	std	Y+40, r25	; 0x28
    339a:	a9 a7       	std	Y+41, r26	; 0x29
    339c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339e:	6f a1       	ldd	r22, Y+39	; 0x27
    33a0:	78 a5       	ldd	r23, Y+40	; 0x28
    33a2:	89 a5       	ldd	r24, Y+41	; 0x29
    33a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	4a e7       	ldi	r20, 0x7A	; 122
    33ac:	55 e4       	ldi	r21, 0x45	; 69
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	8b a3       	std	Y+35, r24	; 0x23
    33b8:	9c a3       	std	Y+36, r25	; 0x24
    33ba:	ad a3       	std	Y+37, r26	; 0x25
    33bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33be:	6b a1       	ldd	r22, Y+35	; 0x23
    33c0:	7c a1       	ldd	r23, Y+36	; 0x24
    33c2:	8d a1       	ldd	r24, Y+37	; 0x25
    33c4:	9e a1       	ldd	r25, Y+38	; 0x26
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	5f e3       	ldi	r21, 0x3F	; 63
    33ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	2c f4       	brge	.+10     	; 0x33e0 <instruction_func+0x1ac>
		__ticks = 1;
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9a a3       	std	Y+34, r25	; 0x22
    33dc:	89 a3       	std	Y+33, r24	; 0x21
    33de:	3f c0       	rjmp	.+126    	; 0x345e <instruction_func+0x22a>
	else if (__tmp > 65535)
    33e0:	6b a1       	ldd	r22, Y+35	; 0x23
    33e2:	7c a1       	ldd	r23, Y+36	; 0x24
    33e4:	8d a1       	ldd	r24, Y+37	; 0x25
    33e6:	9e a1       	ldd	r25, Y+38	; 0x26
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	3f ef       	ldi	r19, 0xFF	; 255
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	57 e4       	ldi	r21, 0x47	; 71
    33f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	4c f5       	brge	.+82     	; 0x344a <instruction_func+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f8:	6f a1       	ldd	r22, Y+39	; 0x27
    33fa:	78 a5       	ldd	r23, Y+40	; 0x28
    33fc:	89 a5       	ldd	r24, Y+41	; 0x29
    33fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e2       	ldi	r20, 0x20	; 32
    3406:	51 e4       	ldi	r21, 0x41	; 65
    3408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	9a a3       	std	Y+34, r25	; 0x22
    341e:	89 a3       	std	Y+33, r24	; 0x21
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <instruction_func+0x20c>
    3422:	80 e9       	ldi	r24, 0x90	; 144
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	98 a3       	std	Y+32, r25	; 0x20
    3428:	8f 8f       	std	Y+31, r24	; 0x1f
    342a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    342c:	98 a1       	ldd	r25, Y+32	; 0x20
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <instruction_func+0x1fa>
    3432:	98 a3       	std	Y+32, r25	; 0x20
    3434:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3436:	89 a1       	ldd	r24, Y+33	; 0x21
    3438:	9a a1       	ldd	r25, Y+34	; 0x22
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	9a a3       	std	Y+34, r25	; 0x22
    343e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3440:	89 a1       	ldd	r24, Y+33	; 0x21
    3442:	9a a1       	ldd	r25, Y+34	; 0x22
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	69 f7       	brne	.-38     	; 0x3422 <instruction_func+0x1ee>
    3448:	14 c0       	rjmp	.+40     	; 0x3472 <instruction_func+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344a:	6b a1       	ldd	r22, Y+35	; 0x23
    344c:	7c a1       	ldd	r23, Y+36	; 0x24
    344e:	8d a1       	ldd	r24, Y+37	; 0x25
    3450:	9e a1       	ldd	r25, Y+38	; 0x26
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	9a a3       	std	Y+34, r25	; 0x22
    345c:	89 a3       	std	Y+33, r24	; 0x21
    345e:	89 a1       	ldd	r24, Y+33	; 0x21
    3460:	9a a1       	ldd	r25, Y+34	; 0x22
    3462:	9e 8f       	std	Y+30, r25	; 0x1e
    3464:	8d 8f       	std	Y+29, r24	; 0x1d
    3466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <instruction_func+0x236>
    346e:	9e 8f       	std	Y+30, r25	; 0x1e
    3470:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	if(user_press==1)
    3472:	8a ad       	ldd	r24, Y+58	; 0x3a
    3474:	81 30       	cpi	r24, 0x01	; 1
    3476:	09 f0       	breq	.+2      	; 0x347a <instruction_func+0x246>
    3478:	12 c1       	rjmp	.+548    	; 0x369e <instruction_func+0x46a>
	{
		LCD_clearScreen();
    347a:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"10: Result");
    347e:	23 eb       	ldi	r18, 0xB3	; 179
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	a9 01       	movw	r20, r18
    3488:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"16: reset");
    348c:	2e eb       	ldi	r18, 0xBE	; 190
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	60 e0       	ldi	r22, 0x00	; 0
    3494:	a9 01       	movw	r20, r18
    3496:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	aa ef       	ldi	r26, 0xFA	; 250
    34a0:	b4 e4       	ldi	r27, 0x44	; 68
    34a2:	89 8f       	std	Y+25, r24	; 0x19
    34a4:	9a 8f       	std	Y+26, r25	; 0x1a
    34a6:	ab 8f       	std	Y+27, r26	; 0x1b
    34a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34aa:	69 8d       	ldd	r22, Y+25	; 0x19
    34ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	4a e7       	ldi	r20, 0x7A	; 122
    34b8:	55 e4       	ldi	r21, 0x45	; 69
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	8d 8b       	std	Y+21, r24	; 0x15
    34c4:	9e 8b       	std	Y+22, r25	; 0x16
    34c6:	af 8b       	std	Y+23, r26	; 0x17
    34c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ca:	6d 89       	ldd	r22, Y+21	; 0x15
    34cc:	7e 89       	ldd	r23, Y+22	; 0x16
    34ce:	8f 89       	ldd	r24, Y+23	; 0x17
    34d0:	98 8d       	ldd	r25, Y+24	; 0x18
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e8       	ldi	r20, 0x80	; 128
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34de:	88 23       	and	r24, r24
    34e0:	2c f4       	brge	.+10     	; 0x34ec <instruction_func+0x2b8>
		__ticks = 1;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9c 8b       	std	Y+20, r25	; 0x14
    34e8:	8b 8b       	std	Y+19, r24	; 0x13
    34ea:	3f c0       	rjmp	.+126    	; 0x356a <instruction_func+0x336>
	else if (__tmp > 65535)
    34ec:	6d 89       	ldd	r22, Y+21	; 0x15
    34ee:	7e 89       	ldd	r23, Y+22	; 0x16
    34f0:	8f 89       	ldd	r24, Y+23	; 0x17
    34f2:	98 8d       	ldd	r25, Y+24	; 0x18
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	4f e7       	ldi	r20, 0x7F	; 127
    34fa:	57 e4       	ldi	r21, 0x47	; 71
    34fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3500:	18 16       	cp	r1, r24
    3502:	4c f5       	brge	.+82     	; 0x3556 <instruction_func+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	69 8d       	ldd	r22, Y+25	; 0x19
    3506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e2       	ldi	r20, 0x20	; 32
    3512:	51 e4       	ldi	r21, 0x41	; 65
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9c 8b       	std	Y+20, r25	; 0x14
    352a:	8b 8b       	std	Y+19, r24	; 0x13
    352c:	0f c0       	rjmp	.+30     	; 0x354c <instruction_func+0x318>
    352e:	80 e9       	ldi	r24, 0x90	; 144
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	9a 8b       	std	Y+18, r25	; 0x12
    3534:	89 8b       	std	Y+17, r24	; 0x11
    3536:	89 89       	ldd	r24, Y+17	; 0x11
    3538:	9a 89       	ldd	r25, Y+18	; 0x12
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <instruction_func+0x306>
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3542:	8b 89       	ldd	r24, Y+19	; 0x13
    3544:	9c 89       	ldd	r25, Y+20	; 0x14
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	69 f7       	brne	.-38     	; 0x352e <instruction_func+0x2fa>
    3554:	14 c0       	rjmp	.+40     	; 0x357e <instruction_func+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3556:	6d 89       	ldd	r22, Y+21	; 0x15
    3558:	7e 89       	ldd	r23, Y+22	; 0x16
    355a:	8f 89       	ldd	r24, Y+23	; 0x17
    355c:	98 8d       	ldd	r25, Y+24	; 0x18
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	9c 8b       	std	Y+20, r25	; 0x14
    3568:	8b 8b       	std	Y+19, r24	; 0x13
    356a:	8b 89       	ldd	r24, Y+19	; 0x13
    356c:	9c 89       	ldd	r25, Y+20	; 0x14
    356e:	98 8b       	std	Y+16, r25	; 0x10
    3570:	8f 87       	std	Y+15, r24	; 0x0f
    3572:	8f 85       	ldd	r24, Y+15	; 0x0f
    3574:	98 89       	ldd	r25, Y+16	; 0x10
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <instruction_func+0x342>
    357a:	98 8b       	std	Y+16, r25	; 0x10
    357c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		LCD_clearScreen();
    357e:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"press 9 : vote");
    3582:	28 ec       	ldi	r18, 0xC8	; 200
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	a9 01       	movw	r20, r18
    358c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"press 6 : repeat");
    3590:	27 ed       	ldi	r18, 0xD7	; 215
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	a9 01       	movw	r20, r18
    359a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
		uint_8 small_press = KEYPAD_getPressedKey();
    359e:	0e 94 0e 18 	call	0x301c	; 0x301c <KEYPAD_getPressedKey>
    35a2:	89 af       	std	Y+57, r24	; 0x39
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	aa e7       	ldi	r26, 0x7A	; 122
    35aa:	b4 e4       	ldi	r27, 0x44	; 68
    35ac:	8b 87       	std	Y+11, r24	; 0x0b
    35ae:	9c 87       	std	Y+12, r25	; 0x0c
    35b0:	ad 87       	std	Y+13, r26	; 0x0d
    35b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	4a e7       	ldi	r20, 0x7A	; 122
    35c2:	55 e4       	ldi	r21, 0x45	; 69
    35c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	8f 83       	std	Y+7, r24	; 0x07
    35ce:	98 87       	std	Y+8, r25	; 0x08
    35d0:	a9 87       	std	Y+9, r26	; 0x09
    35d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35d4:	6f 81       	ldd	r22, Y+7	; 0x07
    35d6:	78 85       	ldd	r23, Y+8	; 0x08
    35d8:	89 85       	ldd	r24, Y+9	; 0x09
    35da:	9a 85       	ldd	r25, Y+10	; 0x0a
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e8       	ldi	r20, 0x80	; 128
    35e2:	5f e3       	ldi	r21, 0x3F	; 63
    35e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35e8:	88 23       	and	r24, r24
    35ea:	2c f4       	brge	.+10     	; 0x35f6 <instruction_func+0x3c2>
		__ticks = 1;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	9e 83       	std	Y+6, r25	; 0x06
    35f2:	8d 83       	std	Y+5, r24	; 0x05
    35f4:	3f c0       	rjmp	.+126    	; 0x3674 <instruction_func+0x440>
	else if (__tmp > 65535)
    35f6:	6f 81       	ldd	r22, Y+7	; 0x07
    35f8:	78 85       	ldd	r23, Y+8	; 0x08
    35fa:	89 85       	ldd	r24, Y+9	; 0x09
    35fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	3f ef       	ldi	r19, 0xFF	; 255
    3602:	4f e7       	ldi	r20, 0x7F	; 127
    3604:	57 e4       	ldi	r21, 0x47	; 71
    3606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    360a:	18 16       	cp	r1, r24
    360c:	4c f5       	brge	.+82     	; 0x3660 <instruction_func+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3610:	7c 85       	ldd	r23, Y+12	; 0x0c
    3612:	8d 85       	ldd	r24, Y+13	; 0x0d
    3614:	9e 85       	ldd	r25, Y+14	; 0x0e
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	40 e2       	ldi	r20, 0x20	; 32
    361c:	51 e4       	ldi	r21, 0x41	; 65
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	bc 01       	movw	r22, r24
    3628:	cd 01       	movw	r24, r26
    362a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	0f c0       	rjmp	.+30     	; 0x3656 <instruction_func+0x422>
    3638:	80 e9       	ldi	r24, 0x90	; 144
    363a:	91 e0       	ldi	r25, 0x01	; 1
    363c:	9c 83       	std	Y+4, r25	; 0x04
    363e:	8b 83       	std	Y+3, r24	; 0x03
    3640:	8b 81       	ldd	r24, Y+3	; 0x03
    3642:	9c 81       	ldd	r25, Y+4	; 0x04
    3644:	01 97       	sbiw	r24, 0x01	; 1
    3646:	f1 f7       	brne	.-4      	; 0x3644 <instruction_func+0x410>
    3648:	9c 83       	std	Y+4, r25	; 0x04
    364a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	69 f7       	brne	.-38     	; 0x3638 <instruction_func+0x404>
    365e:	14 c0       	rjmp	.+40     	; 0x3688 <instruction_func+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3660:	6f 81       	ldd	r22, Y+7	; 0x07
    3662:	78 85       	ldd	r23, Y+8	; 0x08
    3664:	89 85       	ldd	r24, Y+9	; 0x09
    3666:	9a 85       	ldd	r25, Y+10	; 0x0a
    3668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	9e 83       	std	Y+6, r25	; 0x06
    3672:	8d 83       	std	Y+5, r24	; 0x05
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	9a 83       	std	Y+2, r25	; 0x02
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	9a 81       	ldd	r25, Y+2	; 0x02
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <instruction_func+0x44c>
    3684:	9a 83       	std	Y+2, r25	; 0x02
    3686:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

		if(small_press==9)
    3688:	89 ad       	ldd	r24, Y+57	; 0x39
    368a:	89 30       	cpi	r24, 0x09	; 9
    368c:	19 f4       	brne	.+6      	; 0x3694 <instruction_func+0x460>
		{
			menu_screen() ;
    368e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <menu_screen>
    3692:	05 c0       	rjmp	.+10     	; 0x369e <instruction_func+0x46a>
		}
		else if (small_press==6)
    3694:	89 ad       	ldd	r24, Y+57	; 0x39
    3696:	86 30       	cpi	r24, 0x06	; 6
    3698:	11 f4       	brne	.+4      	; 0x369e <instruction_func+0x46a>
		{
			instruction_func();
    369a:	0e 94 1a 19 	call	0x3234	; 0x3234 <instruction_func>
		}
	}
	else
	{}
}
    369e:	ea 96       	adiw	r28, 0x3a	; 58
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	08 95       	ret

000036b0 <menu_screen>:

//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
static void menu_screen()
{
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    36b8:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"A=");
    36bc:	28 ee       	ldi	r18, 0xE8	; 232
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	60 e0       	ldi	r22, 0x00	; 0
    36c4:	a9 01       	movw	r20, r18
    36c6:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_integerToString(A_1);
    36ca:	80 91 56 01 	lds	r24, 0x0156
    36ce:	88 2f       	mov	r24, r24
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>

	LCD_displayStringRowColumn(0,8,"B=");
    36d6:	2b ee       	ldi	r18, 0xEB	; 235
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	68 e0       	ldi	r22, 0x08	; 8
    36de:	a9 01       	movw	r20, r18
    36e0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_integerToString(B_1);
    36e4:	80 91 57 01 	lds	r24, 0x0157
    36e8:	88 2f       	mov	r24, r24
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>

	LCD_displayStringRowColumn(1,0,"C=");
    36f0:	2e ee       	ldi	r18, 0xEE	; 238
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	a9 01       	movw	r20, r18
    36fa:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_integerToString(C_1);
    36fe:	80 91 58 01 	lds	r24, 0x0158
    3702:	88 2f       	mov	r24, r24
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>

	LCD_displayStringRowColumn(1,8,"D=");
    370a:	21 ef       	ldi	r18, 0xF1	; 241
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	68 e0       	ldi	r22, 0x08	; 8
    3712:	a9 01       	movw	r20, r18
    3714:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
	LCD_integerToString(D_1);
    3718:	80 91 59 01 	lds	r24, 0x0159
    371c:	88 2f       	mov	r24, r24
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>

	inc_func();
    3724:	0e 94 97 1b 	call	0x372e	; 0x372e <inc_func>
}
    3728:	cf 91       	pop	r28
    372a:	df 91       	pop	r29
    372c:	08 95       	ret

0000372e <inc_func>:
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
static void inc_func()//function to display menu screen
{
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62
    373a:	c5 56       	subi	r28, 0x65	; 101
    373c:	d0 40       	sbci	r29, 0x00	; 0
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
	uint_8 presskey = KEYPAD_getPressedKey();
    3748:	0e 94 0e 18 	call	0x301c	; 0x301c <KEYPAD_getPressedKey>
    374c:	fe 01       	movw	r30, r28
    374e:	ed 59       	subi	r30, 0x9D	; 157
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 83       	st	Z, r24
	switch (presskey)
    3754:	fe 01       	movw	r30, r28
    3756:	ed 59       	subi	r30, 0x9D	; 157
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	80 81       	ld	r24, Z
    375c:	28 2f       	mov	r18, r24
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	a6 96       	adiw	r28, 0x26	; 38
    3762:	3f af       	std	Y+63, r19	; 0x3f
    3764:	2e af       	std	Y+62, r18	; 0x3e
    3766:	a6 97       	sbiw	r28, 0x26	; 38
    3768:	a6 96       	adiw	r28, 0x26	; 38
    376a:	8e ad       	ldd	r24, Y+62	; 0x3e
    376c:	9f ad       	ldd	r25, Y+63	; 0x3f
    376e:	a6 97       	sbiw	r28, 0x26	; 38
    3770:	83 30       	cpi	r24, 0x03	; 3
    3772:	91 05       	cpc	r25, r1
    3774:	09 f4       	brne	.+2      	; 0x3778 <inc_func+0x4a>
    3776:	b6 c1       	rjmp	.+876    	; 0x3ae4 <inc_func+0x3b6>
    3778:	a6 96       	adiw	r28, 0x26	; 38
    377a:	ee ad       	ldd	r30, Y+62	; 0x3e
    377c:	ff ad       	ldd	r31, Y+63	; 0x3f
    377e:	a6 97       	sbiw	r28, 0x26	; 38
    3780:	e4 30       	cpi	r30, 0x04	; 4
    3782:	f1 05       	cpc	r31, r1
    3784:	84 f4       	brge	.+32     	; 0x37a6 <inc_func+0x78>
    3786:	a6 96       	adiw	r28, 0x26	; 38
    3788:	2e ad       	ldd	r18, Y+62	; 0x3e
    378a:	3f ad       	ldd	r19, Y+63	; 0x3f
    378c:	a6 97       	sbiw	r28, 0x26	; 38
    378e:	21 30       	cpi	r18, 0x01	; 1
    3790:	31 05       	cpc	r19, r1
    3792:	11 f1       	breq	.+68     	; 0x37d8 <inc_func+0xaa>
    3794:	a6 96       	adiw	r28, 0x26	; 38
    3796:	8e ad       	ldd	r24, Y+62	; 0x3e
    3798:	9f ad       	ldd	r25, Y+63	; 0x3f
    379a:	a6 97       	sbiw	r28, 0x26	; 38
    379c:	82 30       	cpi	r24, 0x02	; 2
    379e:	91 05       	cpc	r25, r1
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <inc_func+0x76>
    37a2:	dd c0       	rjmp	.+442    	; 0x395e <inc_func+0x230>
    37a4:	00 c4       	rjmp	.+2048   	; 0x3fa6 <inc_func+0x878>
    37a6:	a6 96       	adiw	r28, 0x26	; 38
    37a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    37aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    37ac:	a6 97       	sbiw	r28, 0x26	; 38
    37ae:	ea 30       	cpi	r30, 0x0A	; 10
    37b0:	f1 05       	cpc	r31, r1
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <inc_func+0x88>
    37b4:	ae c2       	rjmp	.+1372   	; 0x3d12 <inc_func+0x5e4>
    37b6:	a6 96       	adiw	r28, 0x26	; 38
    37b8:	2e ad       	ldd	r18, Y+62	; 0x3e
    37ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    37bc:	a6 97       	sbiw	r28, 0x26	; 38
    37be:	20 31       	cpi	r18, 0x10	; 16
    37c0:	31 05       	cpc	r19, r1
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <inc_func+0x98>
    37c4:	70 c3       	rjmp	.+1760   	; 0x3ea6 <inc_func+0x778>
    37c6:	a6 96       	adiw	r28, 0x26	; 38
    37c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    37ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    37cc:	a6 97       	sbiw	r28, 0x26	; 38
    37ce:	84 30       	cpi	r24, 0x04	; 4
    37d0:	91 05       	cpc	r25, r1
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <inc_func+0xa8>
    37d4:	1c c2       	rjmp	.+1080   	; 0x3c0e <inc_func+0x4e0>
    37d6:	e7 c3       	rjmp	.+1998   	; 0x3fa6 <inc_func+0x878>
    37d8:	fe 01       	movw	r30, r28
    37da:	e1 5a       	subi	r30, 0xA1	; 161
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	aa e7       	ldi	r26, 0x7A	; 122
    37e4:	b4 e4       	ldi	r27, 0x44	; 68
    37e6:	80 83       	st	Z, r24
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	a2 83       	std	Z+2, r26	; 0x02
    37ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ee:	8e 01       	movw	r16, r28
    37f0:	05 5a       	subi	r16, 0xA5	; 165
    37f2:	1f 4f       	sbci	r17, 0xFF	; 255
    37f4:	fe 01       	movw	r30, r28
    37f6:	e1 5a       	subi	r30, 0xA1	; 161
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	60 81       	ld	r22, Z
    37fc:	71 81       	ldd	r23, Z+1	; 0x01
    37fe:	82 81       	ldd	r24, Z+2	; 0x02
    3800:	93 81       	ldd	r25, Z+3	; 0x03
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	4a e7       	ldi	r20, 0x7A	; 122
    3808:	55 e4       	ldi	r21, 0x45	; 69
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	f8 01       	movw	r30, r16
    3814:	80 83       	st	Z, r24
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	a2 83       	std	Z+2, r26	; 0x02
    381a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    381c:	fe 01       	movw	r30, r28
    381e:	e5 5a       	subi	r30, 0xA5	; 165
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	60 81       	ld	r22, Z
    3824:	71 81       	ldd	r23, Z+1	; 0x01
    3826:	82 81       	ldd	r24, Z+2	; 0x02
    3828:	93 81       	ldd	r25, Z+3	; 0x03
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e8       	ldi	r20, 0x80	; 128
    3830:	5f e3       	ldi	r21, 0x3F	; 63
    3832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3836:	88 23       	and	r24, r24
    3838:	44 f4       	brge	.+16     	; 0x384a <inc_func+0x11c>
		__ticks = 1;
    383a:	fe 01       	movw	r30, r28
    383c:	e7 5a       	subi	r30, 0xA7	; 167
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
    3848:	64 c0       	rjmp	.+200    	; 0x3912 <inc_func+0x1e4>
	else if (__tmp > 65535)
    384a:	fe 01       	movw	r30, r28
    384c:	e5 5a       	subi	r30, 0xA5	; 165
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	60 81       	ld	r22, Z
    3852:	71 81       	ldd	r23, Z+1	; 0x01
    3854:	82 81       	ldd	r24, Z+2	; 0x02
    3856:	93 81       	ldd	r25, Z+3	; 0x03
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f e7       	ldi	r20, 0x7F	; 127
    385e:	57 e4       	ldi	r21, 0x47	; 71
    3860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3864:	18 16       	cp	r1, r24
    3866:	0c f0       	brlt	.+2      	; 0x386a <inc_func+0x13c>
    3868:	43 c0       	rjmp	.+134    	; 0x38f0 <inc_func+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386a:	fe 01       	movw	r30, r28
    386c:	e1 5a       	subi	r30, 0xA1	; 161
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	60 81       	ld	r22, Z
    3872:	71 81       	ldd	r23, Z+1	; 0x01
    3874:	82 81       	ldd	r24, Z+2	; 0x02
    3876:	93 81       	ldd	r25, Z+3	; 0x03
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	40 e2       	ldi	r20, 0x20	; 32
    387e:	51 e4       	ldi	r21, 0x41	; 65
    3880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	8e 01       	movw	r16, r28
    388a:	07 5a       	subi	r16, 0xA7	; 167
    388c:	1f 4f       	sbci	r17, 0xFF	; 255
    388e:	bc 01       	movw	r22, r24
    3890:	cd 01       	movw	r24, r26
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	f8 01       	movw	r30, r16
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	80 83       	st	Z, r24
    38a0:	1f c0       	rjmp	.+62     	; 0x38e0 <inc_func+0x1b2>
    38a2:	fe 01       	movw	r30, r28
    38a4:	e9 5a       	subi	r30, 0xA9	; 169
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 e9       	ldi	r24, 0x90	; 144
    38aa:	91 e0       	ldi	r25, 0x01	; 1
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	80 83       	st	Z, r24
    38b0:	fe 01       	movw	r30, r28
    38b2:	e9 5a       	subi	r30, 0xA9	; 169
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	f1 f7       	brne	.-4      	; 0x38ba <inc_func+0x18c>
    38be:	fe 01       	movw	r30, r28
    38c0:	e9 5a       	subi	r30, 0xA9	; 169
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c8:	de 01       	movw	r26, r28
    38ca:	a7 5a       	subi	r26, 0xA7	; 167
    38cc:	bf 4f       	sbci	r27, 0xFF	; 255
    38ce:	fe 01       	movw	r30, r28
    38d0:	e7 5a       	subi	r30, 0xA7	; 167
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	11 96       	adiw	r26, 0x01	; 1
    38dc:	9c 93       	st	X, r25
    38de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e0:	fe 01       	movw	r30, r28
    38e2:	e7 5a       	subi	r30, 0xA7	; 167
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	80 81       	ld	r24, Z
    38e8:	91 81       	ldd	r25, Z+1	; 0x01
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	d1 f6       	brne	.-76     	; 0x38a2 <inc_func+0x174>
    38ee:	27 c0       	rjmp	.+78     	; 0x393e <inc_func+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f0:	8e 01       	movw	r16, r28
    38f2:	07 5a       	subi	r16, 0xA7	; 167
    38f4:	1f 4f       	sbci	r17, 0xFF	; 255
    38f6:	fe 01       	movw	r30, r28
    38f8:	e5 5a       	subi	r30, 0xA5	; 165
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	60 81       	ld	r22, Z
    38fe:	71 81       	ldd	r23, Z+1	; 0x01
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	93 81       	ldd	r25, Z+3	; 0x03
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	f8 01       	movw	r30, r16
    390e:	91 83       	std	Z+1, r25	; 0x01
    3910:	80 83       	st	Z, r24
    3912:	de 01       	movw	r26, r28
    3914:	ab 5a       	subi	r26, 0xAB	; 171
    3916:	bf 4f       	sbci	r27, 0xFF	; 255
    3918:	fe 01       	movw	r30, r28
    391a:	e7 5a       	subi	r30, 0xA7	; 167
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 81       	ld	r24, Z
    3920:	91 81       	ldd	r25, Z+1	; 0x01
    3922:	8d 93       	st	X+, r24
    3924:	9c 93       	st	X, r25
    3926:	fe 01       	movw	r30, r28
    3928:	eb 5a       	subi	r30, 0xAB	; 171
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	80 81       	ld	r24, Z
    392e:	91 81       	ldd	r25, Z+1	; 0x01
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <inc_func+0x202>
    3934:	fe 01       	movw	r30, r28
    3936:	eb 5a       	subi	r30, 0xAB	; 171
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	91 83       	std	Z+1, r25	; 0x01
    393c:	80 83       	st	Z, r24
	{
	    case 1:
	    	    _delay_ms(1000);
		        A_1++;
    393e:	80 91 56 01 	lds	r24, 0x0156
    3942:	8f 5f       	subi	r24, 0xFF	; 255
    3944:	80 93 56 01 	sts	0x0156, r24
		        LCD_moveCursor(0,2);
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	62 e0       	ldi	r22, 0x02	; 2
    394c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <LCD_moveCursor>
	    		LCD_integerToString(A_1);
    3950:	80 91 56 01 	lds	r24, 0x0156
    3954:	88 2f       	mov	r24, r24
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>
    395c:	a1 c3       	rjmp	.+1858   	; 0x40a0 <inc_func+0x972>
	         break;
    395e:	fe 01       	movw	r30, r28
    3960:	ef 5a       	subi	r30, 0xAF	; 175
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	aa e7       	ldi	r26, 0x7A	; 122
    396a:	b4 e4       	ldi	r27, 0x44	; 68
    396c:	80 83       	st	Z, r24
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	a2 83       	std	Z+2, r26	; 0x02
    3972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3974:	8e 01       	movw	r16, r28
    3976:	03 5b       	subi	r16, 0xB3	; 179
    3978:	1f 4f       	sbci	r17, 0xFF	; 255
    397a:	fe 01       	movw	r30, r28
    397c:	ef 5a       	subi	r30, 0xAF	; 175
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a e7       	ldi	r20, 0x7A	; 122
    398e:	55 e4       	ldi	r21, 0x45	; 69
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	f8 01       	movw	r30, r16
    399a:	80 83       	st	Z, r24
    399c:	91 83       	std	Z+1, r25	; 0x01
    399e:	a2 83       	std	Z+2, r26	; 0x02
    39a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39a2:	fe 01       	movw	r30, r28
    39a4:	e3 5b       	subi	r30, 0xB3	; 179
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	60 81       	ld	r22, Z
    39aa:	71 81       	ldd	r23, Z+1	; 0x01
    39ac:	82 81       	ldd	r24, Z+2	; 0x02
    39ae:	93 81       	ldd	r25, Z+3	; 0x03
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	44 f4       	brge	.+16     	; 0x39d0 <inc_func+0x2a2>
		__ticks = 1;
    39c0:	fe 01       	movw	r30, r28
    39c2:	e5 5b       	subi	r30, 0xB5	; 181
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	91 83       	std	Z+1, r25	; 0x01
    39cc:	80 83       	st	Z, r24
    39ce:	64 c0       	rjmp	.+200    	; 0x3a98 <inc_func+0x36a>
	else if (__tmp > 65535)
    39d0:	fe 01       	movw	r30, r28
    39d2:	e3 5b       	subi	r30, 0xB3	; 179
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	3f ef       	ldi	r19, 0xFF	; 255
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	57 e4       	ldi	r21, 0x47	; 71
    39e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	0c f0       	brlt	.+2      	; 0x39f0 <inc_func+0x2c2>
    39ee:	43 c0       	rjmp	.+134    	; 0x3a76 <inc_func+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f0:	fe 01       	movw	r30, r28
    39f2:	ef 5a       	subi	r30, 0xAF	; 175
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e2       	ldi	r20, 0x20	; 32
    3a04:	51 e4       	ldi	r21, 0x41	; 65
    3a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	8e 01       	movw	r16, r28
    3a10:	05 5b       	subi	r16, 0xB5	; 181
    3a12:	1f 4f       	sbci	r17, 0xFF	; 255
    3a14:	bc 01       	movw	r22, r24
    3a16:	cd 01       	movw	r24, r26
    3a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	f8 01       	movw	r30, r16
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
    3a26:	1f c0       	rjmp	.+62     	; 0x3a66 <inc_func+0x338>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e7 5b       	subi	r30, 0xB7	; 183
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	80 e9       	ldi	r24, 0x90	; 144
    3a30:	91 e0       	ldi	r25, 0x01	; 1
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	80 83       	st	Z, r24
    3a36:	fe 01       	movw	r30, r28
    3a38:	e7 5b       	subi	r30, 0xB7	; 183
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 81       	ld	r24, Z
    3a3e:	91 81       	ldd	r25, Z+1	; 0x01
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <inc_func+0x312>
    3a44:	fe 01       	movw	r30, r28
    3a46:	e7 5b       	subi	r30, 0xB7	; 183
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4e:	de 01       	movw	r26, r28
    3a50:	a5 5b       	subi	r26, 0xB5	; 181
    3a52:	bf 4f       	sbci	r27, 0xFF	; 255
    3a54:	fe 01       	movw	r30, r28
    3a56:	e5 5b       	subi	r30, 0xB5	; 181
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 81       	ld	r24, Z
    3a5c:	91 81       	ldd	r25, Z+1	; 0x01
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	11 96       	adiw	r26, 0x01	; 1
    3a62:	9c 93       	st	X, r25
    3a64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a66:	fe 01       	movw	r30, r28
    3a68:	e5 5b       	subi	r30, 0xB5	; 181
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	d1 f6       	brne	.-76     	; 0x3a28 <inc_func+0x2fa>
    3a74:	27 c0       	rjmp	.+78     	; 0x3ac4 <inc_func+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a76:	8e 01       	movw	r16, r28
    3a78:	05 5b       	subi	r16, 0xB5	; 181
    3a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e3 5b       	subi	r30, 0xB3	; 179
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	60 81       	ld	r22, Z
    3a84:	71 81       	ldd	r23, Z+1	; 0x01
    3a86:	82 81       	ldd	r24, Z+2	; 0x02
    3a88:	93 81       	ldd	r25, Z+3	; 0x03
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	f8 01       	movw	r30, r16
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	80 83       	st	Z, r24
    3a98:	de 01       	movw	r26, r28
    3a9a:	a9 5b       	subi	r26, 0xB9	; 185
    3a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e5 5b       	subi	r30, 0xB5	; 181
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	8d 93       	st	X+, r24
    3aaa:	9c 93       	st	X, r25
    3aac:	fe 01       	movw	r30, r28
    3aae:	e9 5b       	subi	r30, 0xB9	; 185
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <inc_func+0x388>
    3aba:	fe 01       	movw	r30, r28
    3abc:	e9 5b       	subi	r30, 0xB9	; 185
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
	    case 2:
	    	    _delay_ms(1000);
	            B_1++;
    3ac4:	80 91 57 01 	lds	r24, 0x0157
    3ac8:	8f 5f       	subi	r24, 0xFF	; 255
    3aca:	80 93 57 01 	sts	0x0157, r24
		        LCD_moveCursor(0,10);
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	6a e0       	ldi	r22, 0x0A	; 10
    3ad2:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <LCD_moveCursor>
	    		LCD_integerToString(B_1);
    3ad6:	80 91 57 01 	lds	r24, 0x0157
    3ada:	88 2f       	mov	r24, r24
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>
    3ae2:	de c2       	rjmp	.+1468   	; 0x40a0 <inc_func+0x972>
	         break;
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	ed 5b       	subi	r30, 0xBD	; 189
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	aa e7       	ldi	r26, 0x7A	; 122
    3af0:	b4 e4       	ldi	r27, 0x44	; 68
    3af2:	80 83       	st	Z, r24
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	a2 83       	std	Z+2, r26	; 0x02
    3af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afa:	8e 01       	movw	r16, r28
    3afc:	01 5c       	subi	r16, 0xC1	; 193
    3afe:	1f 4f       	sbci	r17, 0xFF	; 255
    3b00:	fe 01       	movw	r30, r28
    3b02:	ed 5b       	subi	r30, 0xBD	; 189
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	60 81       	ld	r22, Z
    3b08:	71 81       	ldd	r23, Z+1	; 0x01
    3b0a:	82 81       	ldd	r24, Z+2	; 0x02
    3b0c:	93 81       	ldd	r25, Z+3	; 0x03
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	4a e7       	ldi	r20, 0x7A	; 122
    3b14:	55 e4       	ldi	r21, 0x45	; 69
    3b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	f8 01       	movw	r30, r16
    3b20:	80 83       	st	Z, r24
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	a2 83       	std	Z+2, r26	; 0x02
    3b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ff 96       	adiw	r30, 0x3f	; 63
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <inc_func+0x420>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9e af       	std	Y+62, r25	; 0x3e
    3b4a:	8d af       	std	Y+61, r24	; 0x3d
    3b4c:	46 c0       	rjmp	.+140    	; 0x3bda <inc_func+0x4ac>
	else if (__tmp > 65535)
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ff 96       	adiw	r30, 0x3f	; 63
    3b52:	60 81       	ld	r22, Z
    3b54:	71 81       	ldd	r23, Z+1	; 0x01
    3b56:	82 81       	ldd	r24, Z+2	; 0x02
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	3f ef       	ldi	r19, 0xFF	; 255
    3b5e:	4f e7       	ldi	r20, 0x7F	; 127
    3b60:	57 e4       	ldi	r21, 0x47	; 71
    3b62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b66:	18 16       	cp	r1, r24
    3b68:	64 f5       	brge	.+88     	; 0x3bc2 <inc_func+0x494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6a:	fe 01       	movw	r30, r28
    3b6c:	ed 5b       	subi	r30, 0xBD	; 189
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	60 81       	ld	r22, Z
    3b72:	71 81       	ldd	r23, Z+1	; 0x01
    3b74:	82 81       	ldd	r24, Z+2	; 0x02
    3b76:	93 81       	ldd	r25, Z+3	; 0x03
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	40 e2       	ldi	r20, 0x20	; 32
    3b7e:	51 e4       	ldi	r21, 0x41	; 65
    3b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	bc 01       	movw	r22, r24
    3b8a:	cd 01       	movw	r24, r26
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	9e af       	std	Y+62, r25	; 0x3e
    3b96:	8d af       	std	Y+61, r24	; 0x3d
    3b98:	0f c0       	rjmp	.+30     	; 0x3bb8 <inc_func+0x48a>
    3b9a:	80 e9       	ldi	r24, 0x90	; 144
    3b9c:	91 e0       	ldi	r25, 0x01	; 1
    3b9e:	9c af       	std	Y+60, r25	; 0x3c
    3ba0:	8b af       	std	Y+59, r24	; 0x3b
    3ba2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ba4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <inc_func+0x478>
    3baa:	9c af       	std	Y+60, r25	; 0x3c
    3bac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bae:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	9e af       	std	Y+62, r25	; 0x3e
    3bb6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bba:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	69 f7       	brne	.-38     	; 0x3b9a <inc_func+0x46c>
    3bc0:	16 c0       	rjmp	.+44     	; 0x3bee <inc_func+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	ff 96       	adiw	r30, 0x3f	; 63
    3bc6:	60 81       	ld	r22, Z
    3bc8:	71 81       	ldd	r23, Z+1	; 0x01
    3bca:	82 81       	ldd	r24, Z+2	; 0x02
    3bcc:	93 81       	ldd	r25, Z+3	; 0x03
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9e af       	std	Y+62, r25	; 0x3e
    3bd8:	8d af       	std	Y+61, r24	; 0x3d
    3bda:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bde:	9a af       	std	Y+58, r25	; 0x3a
    3be0:	89 af       	std	Y+57, r24	; 0x39
    3be2:	89 ad       	ldd	r24, Y+57	; 0x39
    3be4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <inc_func+0x4b8>
    3bea:	9a af       	std	Y+58, r25	; 0x3a
    3bec:	89 af       	std	Y+57, r24	; 0x39
	    case 3:
	    	    _delay_ms(1000);
	    	    C_1++;
    3bee:	80 91 58 01 	lds	r24, 0x0158
    3bf2:	8f 5f       	subi	r24, 0xFF	; 255
    3bf4:	80 93 58 01 	sts	0x0158, r24
		        LCD_moveCursor(1,2);
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	62 e0       	ldi	r22, 0x02	; 2
    3bfc:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <LCD_moveCursor>
	    		LCD_integerToString(C_1);
    3c00:	80 91 58 01 	lds	r24, 0x0158
    3c04:	88 2f       	mov	r24, r24
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>
    3c0c:	49 c2       	rjmp	.+1170   	; 0x40a0 <inc_func+0x972>
	         break;
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	aa e7       	ldi	r26, 0x7A	; 122
    3c14:	b4 e4       	ldi	r27, 0x44	; 68
    3c16:	8d ab       	std	Y+53, r24	; 0x35
    3c18:	9e ab       	std	Y+54, r25	; 0x36
    3c1a:	af ab       	std	Y+55, r26	; 0x37
    3c1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c1e:	6d a9       	ldd	r22, Y+53	; 0x35
    3c20:	7e a9       	ldd	r23, Y+54	; 0x36
    3c22:	8f a9       	ldd	r24, Y+55	; 0x37
    3c24:	98 ad       	ldd	r25, Y+56	; 0x38
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	4a e7       	ldi	r20, 0x7A	; 122
    3c2c:	55 e4       	ldi	r21, 0x45	; 69
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	89 ab       	std	Y+49, r24	; 0x31
    3c38:	9a ab       	std	Y+50, r25	; 0x32
    3c3a:	ab ab       	std	Y+51, r26	; 0x33
    3c3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    3c40:	7a a9       	ldd	r23, Y+50	; 0x32
    3c42:	8b a9       	ldd	r24, Y+51	; 0x33
    3c44:	9c a9       	ldd	r25, Y+52	; 0x34
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e8       	ldi	r20, 0x80	; 128
    3c4c:	5f e3       	ldi	r21, 0x3F	; 63
    3c4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c52:	88 23       	and	r24, r24
    3c54:	2c f4       	brge	.+10     	; 0x3c60 <inc_func+0x532>
		__ticks = 1;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	98 ab       	std	Y+48, r25	; 0x30
    3c5c:	8f a7       	std	Y+47, r24	; 0x2f
    3c5e:	3f c0       	rjmp	.+126    	; 0x3cde <inc_func+0x5b0>
	else if (__tmp > 65535)
    3c60:	69 a9       	ldd	r22, Y+49	; 0x31
    3c62:	7a a9       	ldd	r23, Y+50	; 0x32
    3c64:	8b a9       	ldd	r24, Y+51	; 0x33
    3c66:	9c a9       	ldd	r25, Y+52	; 0x34
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	3f ef       	ldi	r19, 0xFF	; 255
    3c6c:	4f e7       	ldi	r20, 0x7F	; 127
    3c6e:	57 e4       	ldi	r21, 0x47	; 71
    3c70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c74:	18 16       	cp	r1, r24
    3c76:	4c f5       	brge	.+82     	; 0x3cca <inc_func+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c78:	6d a9       	ldd	r22, Y+53	; 0x35
    3c7a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c7c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c7e:	98 ad       	ldd	r25, Y+56	; 0x38
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e2       	ldi	r20, 0x20	; 32
    3c86:	51 e4       	ldi	r21, 0x41	; 65
    3c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	bc 01       	movw	r22, r24
    3c92:	cd 01       	movw	r24, r26
    3c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	98 ab       	std	Y+48, r25	; 0x30
    3c9e:	8f a7       	std	Y+47, r24	; 0x2f
    3ca0:	0f c0       	rjmp	.+30     	; 0x3cc0 <inc_func+0x592>
    3ca2:	80 e9       	ldi	r24, 0x90	; 144
    3ca4:	91 e0       	ldi	r25, 0x01	; 1
    3ca6:	9e a7       	std	Y+46, r25	; 0x2e
    3ca8:	8d a7       	std	Y+45, r24	; 0x2d
    3caa:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cac:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	f1 f7       	brne	.-4      	; 0x3cae <inc_func+0x580>
    3cb2:	9e a7       	std	Y+46, r25	; 0x2e
    3cb4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cb8:	98 a9       	ldd	r25, Y+48	; 0x30
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	98 ab       	std	Y+48, r25	; 0x30
    3cbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cc2:	98 a9       	ldd	r25, Y+48	; 0x30
    3cc4:	00 97       	sbiw	r24, 0x00	; 0
    3cc6:	69 f7       	brne	.-38     	; 0x3ca2 <inc_func+0x574>
    3cc8:	14 c0       	rjmp	.+40     	; 0x3cf2 <inc_func+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cca:	69 a9       	ldd	r22, Y+49	; 0x31
    3ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    3cce:	8b a9       	ldd	r24, Y+51	; 0x33
    3cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    3cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	98 ab       	std	Y+48, r25	; 0x30
    3cdc:	8f a7       	std	Y+47, r24	; 0x2f
    3cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ce2:	9c a7       	std	Y+44, r25	; 0x2c
    3ce4:	8b a7       	std	Y+43, r24	; 0x2b
    3ce6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ce8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <inc_func+0x5bc>
    3cee:	9c a7       	std	Y+44, r25	; 0x2c
    3cf0:	8b a7       	std	Y+43, r24	; 0x2b
	    case 4:
	    	    _delay_ms(1000);
	    	    D_1++;
    3cf2:	80 91 59 01 	lds	r24, 0x0159
    3cf6:	8f 5f       	subi	r24, 0xFF	; 255
    3cf8:	80 93 59 01 	sts	0x0159, r24
		        LCD_moveCursor(1,10);
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	6a e0       	ldi	r22, 0x0A	; 10
    3d00:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <LCD_moveCursor>
	    		LCD_integerToString(D_1);
    3d04:	80 91 59 01 	lds	r24, 0x0159
    3d08:	88 2f       	mov	r24, r24
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_integerToString>
    3d10:	c7 c1       	rjmp	.+910    	; 0x40a0 <inc_func+0x972>
	         break;
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	aa e7       	ldi	r26, 0x7A	; 122
    3d18:	b4 e4       	ldi	r27, 0x44	; 68
    3d1a:	8f a3       	std	Y+39, r24	; 0x27
    3d1c:	98 a7       	std	Y+40, r25	; 0x28
    3d1e:	a9 a7       	std	Y+41, r26	; 0x29
    3d20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d22:	6f a1       	ldd	r22, Y+39	; 0x27
    3d24:	78 a5       	ldd	r23, Y+40	; 0x28
    3d26:	89 a5       	ldd	r24, Y+41	; 0x29
    3d28:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	4a e7       	ldi	r20, 0x7A	; 122
    3d30:	55 e4       	ldi	r21, 0x45	; 69
    3d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	8b a3       	std	Y+35, r24	; 0x23
    3d3c:	9c a3       	std	Y+36, r25	; 0x24
    3d3e:	ad a3       	std	Y+37, r26	; 0x25
    3d40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d42:	6b a1       	ldd	r22, Y+35	; 0x23
    3d44:	7c a1       	ldd	r23, Y+36	; 0x24
    3d46:	8d a1       	ldd	r24, Y+37	; 0x25
    3d48:	9e a1       	ldd	r25, Y+38	; 0x26
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e8       	ldi	r20, 0x80	; 128
    3d50:	5f e3       	ldi	r21, 0x3F	; 63
    3d52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d56:	88 23       	and	r24, r24
    3d58:	2c f4       	brge	.+10     	; 0x3d64 <inc_func+0x636>
		__ticks = 1;
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	9a a3       	std	Y+34, r25	; 0x22
    3d60:	89 a3       	std	Y+33, r24	; 0x21
    3d62:	3f c0       	rjmp	.+126    	; 0x3de2 <inc_func+0x6b4>
	else if (__tmp > 65535)
    3d64:	6b a1       	ldd	r22, Y+35	; 0x23
    3d66:	7c a1       	ldd	r23, Y+36	; 0x24
    3d68:	8d a1       	ldd	r24, Y+37	; 0x25
    3d6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	3f ef       	ldi	r19, 0xFF	; 255
    3d70:	4f e7       	ldi	r20, 0x7F	; 127
    3d72:	57 e4       	ldi	r21, 0x47	; 71
    3d74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d78:	18 16       	cp	r1, r24
    3d7a:	4c f5       	brge	.+82     	; 0x3dce <inc_func+0x6a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d7c:	6f a1       	ldd	r22, Y+39	; 0x27
    3d7e:	78 a5       	ldd	r23, Y+40	; 0x28
    3d80:	89 a5       	ldd	r24, Y+41	; 0x29
    3d82:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 e2       	ldi	r20, 0x20	; 32
    3d8a:	51 e4       	ldi	r21, 0x41	; 65
    3d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	bc 01       	movw	r22, r24
    3d96:	cd 01       	movw	r24, r26
    3d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	9a a3       	std	Y+34, r25	; 0x22
    3da2:	89 a3       	std	Y+33, r24	; 0x21
    3da4:	0f c0       	rjmp	.+30     	; 0x3dc4 <inc_func+0x696>
    3da6:	80 e9       	ldi	r24, 0x90	; 144
    3da8:	91 e0       	ldi	r25, 0x01	; 1
    3daa:	98 a3       	std	Y+32, r25	; 0x20
    3dac:	8f 8f       	std	Y+31, r24	; 0x1f
    3dae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3db0:	98 a1       	ldd	r25, Y+32	; 0x20
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	f1 f7       	brne	.-4      	; 0x3db2 <inc_func+0x684>
    3db6:	98 a3       	std	Y+32, r25	; 0x20
    3db8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dba:	89 a1       	ldd	r24, Y+33	; 0x21
    3dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	9a a3       	std	Y+34, r25	; 0x22
    3dc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    3dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	69 f7       	brne	.-38     	; 0x3da6 <inc_func+0x678>
    3dcc:	14 c0       	rjmp	.+40     	; 0x3df6 <inc_func+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dce:	6b a1       	ldd	r22, Y+35	; 0x23
    3dd0:	7c a1       	ldd	r23, Y+36	; 0x24
    3dd2:	8d a1       	ldd	r24, Y+37	; 0x25
    3dd4:	9e a1       	ldd	r25, Y+38	; 0x26
    3dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	9a a3       	std	Y+34, r25	; 0x22
    3de0:	89 a3       	std	Y+33, r24	; 0x21
    3de2:	89 a1       	ldd	r24, Y+33	; 0x21
    3de4:	9a a1       	ldd	r25, Y+34	; 0x22
    3de6:	9e 8f       	std	Y+30, r25	; 0x1e
    3de8:	8d 8f       	std	Y+29, r24	; 0x1d
    3dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	f1 f7       	brne	.-4      	; 0x3dee <inc_func+0x6c0>
    3df2:	9e 8f       	std	Y+30, r25	; 0x1e
    3df4:	8d 8f       	std	Y+29, r24	; 0x1d
	    case 10:
	    	     _delay_ms(1000);
		         LCD_clearScreen();
    3df6:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>

	    	     if((A_1 >B_1)&&(A_1 >C_1)&&(A_1 >D_1))
    3dfa:	90 91 56 01 	lds	r25, 0x0156
    3dfe:	80 91 57 01 	lds	r24, 0x0157
    3e02:	89 17       	cp	r24, r25
    3e04:	a0 f4       	brcc	.+40     	; 0x3e2e <inc_func+0x700>
    3e06:	90 91 56 01 	lds	r25, 0x0156
    3e0a:	80 91 58 01 	lds	r24, 0x0158
    3e0e:	89 17       	cp	r24, r25
    3e10:	70 f4       	brcc	.+28     	; 0x3e2e <inc_func+0x700>
    3e12:	90 91 56 01 	lds	r25, 0x0156
    3e16:	80 91 59 01 	lds	r24, 0x0159
    3e1a:	89 17       	cp	r24, r25
    3e1c:	40 f4       	brcc	.+16     	; 0x3e2e <inc_func+0x700>
	    	     {
	 		        LCD_displayStringRowColumn(0,0,"A IS The Winner");
    3e1e:	24 ef       	ldi	r18, 0xF4	; 244
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	a9 01       	movw	r20, r18
    3e28:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    3e2c:	39 c1       	rjmp	.+626    	; 0x40a0 <inc_func+0x972>
	    	     }
	    	     else  if((B_1>A_1)&&(B_1>C_1)&&(B_1 >D_1))
    3e2e:	90 91 57 01 	lds	r25, 0x0157
    3e32:	80 91 56 01 	lds	r24, 0x0156
    3e36:	89 17       	cp	r24, r25
    3e38:	a0 f4       	brcc	.+40     	; 0x3e62 <inc_func+0x734>
    3e3a:	90 91 57 01 	lds	r25, 0x0157
    3e3e:	80 91 58 01 	lds	r24, 0x0158
    3e42:	89 17       	cp	r24, r25
    3e44:	70 f4       	brcc	.+28     	; 0x3e62 <inc_func+0x734>
    3e46:	90 91 57 01 	lds	r25, 0x0157
    3e4a:	80 91 59 01 	lds	r24, 0x0159
    3e4e:	89 17       	cp	r24, r25
    3e50:	40 f4       	brcc	.+16     	; 0x3e62 <inc_func+0x734>
	    	     {
	 		        LCD_displayStringRowColumn(0,0,"B IS The Winner");
    3e52:	24 e0       	ldi	r18, 0x04	; 4
    3e54:	31 e0       	ldi	r19, 0x01	; 1
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	a9 01       	movw	r20, r18
    3e5c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    3e60:	1f c1       	rjmp	.+574    	; 0x40a0 <inc_func+0x972>
	    	     }
	    	     else if((C_1>A_1)&&(C_1>B_1)&&(C_1>D_1))
    3e62:	90 91 58 01 	lds	r25, 0x0158
    3e66:	80 91 56 01 	lds	r24, 0x0156
    3e6a:	89 17       	cp	r24, r25
    3e6c:	a0 f4       	brcc	.+40     	; 0x3e96 <inc_func+0x768>
    3e6e:	90 91 58 01 	lds	r25, 0x0158
    3e72:	80 91 57 01 	lds	r24, 0x0157
    3e76:	89 17       	cp	r24, r25
    3e78:	70 f4       	brcc	.+28     	; 0x3e96 <inc_func+0x768>
    3e7a:	90 91 58 01 	lds	r25, 0x0158
    3e7e:	80 91 59 01 	lds	r24, 0x0159
    3e82:	89 17       	cp	r24, r25
    3e84:	40 f4       	brcc	.+16     	; 0x3e96 <inc_func+0x768>
	    	     {
	 		        LCD_displayStringRowColumn(0,0,"C IS The Winner");
    3e86:	24 e1       	ldi	r18, 0x14	; 20
    3e88:	31 e0       	ldi	r19, 0x01	; 1
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	a9 01       	movw	r20, r18
    3e90:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    3e94:	05 c1       	rjmp	.+522    	; 0x40a0 <inc_func+0x972>
	    	     }
	    	     else
	    	     {
	 		        LCD_displayStringRowColumn(0,0,"D IS The Winner");
    3e96:	24 e2       	ldi	r18, 0x24	; 36
    3e98:	31 e0       	ldi	r19, 0x01	; 1
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	a9 01       	movw	r20, r18
    3ea0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    3ea4:	fd c0       	rjmp	.+506    	; 0x40a0 <inc_func+0x972>
	    	     }
	          break;
	    case 16:
		        LCD_clearScreen();
    3ea6:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
		        LCD_displayStringRowColumn(0,0,"System Reset");
    3eaa:	24 e3       	ldi	r18, 0x34	; 52
    3eac:	31 e0       	ldi	r19, 0x01	; 1
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	60 e0       	ldi	r22, 0x00	; 0
    3eb2:	a9 01       	movw	r20, r18
    3eb4:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	aa e7       	ldi	r26, 0x7A	; 122
    3ebe:	b4 e4       	ldi	r27, 0x44	; 68
    3ec0:	89 8f       	std	Y+25, r24	; 0x19
    3ec2:	9a 8f       	std	Y+26, r25	; 0x1a
    3ec4:	ab 8f       	std	Y+27, r26	; 0x1b
    3ec6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec8:	69 8d       	ldd	r22, Y+25	; 0x19
    3eca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ecc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ece:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	4a e7       	ldi	r20, 0x7A	; 122
    3ed6:	55 e4       	ldi	r21, 0x45	; 69
    3ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	8d 8b       	std	Y+21, r24	; 0x15
    3ee2:	9e 8b       	std	Y+22, r25	; 0x16
    3ee4:	af 8b       	std	Y+23, r26	; 0x17
    3ee6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eea:	7e 89       	ldd	r23, Y+22	; 0x16
    3eec:	8f 89       	ldd	r24, Y+23	; 0x17
    3eee:	98 8d       	ldd	r25, Y+24	; 0x18
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e8       	ldi	r20, 0x80	; 128
    3ef6:	5f e3       	ldi	r21, 0x3F	; 63
    3ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3efc:	88 23       	and	r24, r24
    3efe:	2c f4       	brge	.+10     	; 0x3f0a <inc_func+0x7dc>
		__ticks = 1;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	9c 8b       	std	Y+20, r25	; 0x14
    3f06:	8b 8b       	std	Y+19, r24	; 0x13
    3f08:	3f c0       	rjmp	.+126    	; 0x3f88 <inc_func+0x85a>
	else if (__tmp > 65535)
    3f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f10:	98 8d       	ldd	r25, Y+24	; 0x18
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	3f ef       	ldi	r19, 0xFF	; 255
    3f16:	4f e7       	ldi	r20, 0x7F	; 127
    3f18:	57 e4       	ldi	r21, 0x47	; 71
    3f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1e:	18 16       	cp	r1, r24
    3f20:	4c f5       	brge	.+82     	; 0x3f74 <inc_func+0x846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f22:	69 8d       	ldd	r22, Y+25	; 0x19
    3f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e2       	ldi	r20, 0x20	; 32
    3f30:	51 e4       	ldi	r21, 0x41	; 65
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	9c 8b       	std	Y+20, r25	; 0x14
    3f48:	8b 8b       	std	Y+19, r24	; 0x13
    3f4a:	0f c0       	rjmp	.+30     	; 0x3f6a <inc_func+0x83c>
    3f4c:	80 e9       	ldi	r24, 0x90	; 144
    3f4e:	91 e0       	ldi	r25, 0x01	; 1
    3f50:	9a 8b       	std	Y+18, r25	; 0x12
    3f52:	89 8b       	std	Y+17, r24	; 0x11
    3f54:	89 89       	ldd	r24, Y+17	; 0x11
    3f56:	9a 89       	ldd	r25, Y+18	; 0x12
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <inc_func+0x82a>
    3f5c:	9a 8b       	std	Y+18, r25	; 0x12
    3f5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f60:	8b 89       	ldd	r24, Y+19	; 0x13
    3f62:	9c 89       	ldd	r25, Y+20	; 0x14
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	9c 8b       	std	Y+20, r25	; 0x14
    3f68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	69 f7       	brne	.-38     	; 0x3f4c <inc_func+0x81e>
    3f72:	14 c0       	rjmp	.+40     	; 0x3f9c <inc_func+0x86e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f74:	6d 89       	ldd	r22, Y+21	; 0x15
    3f76:	7e 89       	ldd	r23, Y+22	; 0x16
    3f78:	8f 89       	ldd	r24, Y+23	; 0x17
    3f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9c 8b       	std	Y+20, r25	; 0x14
    3f86:	8b 8b       	std	Y+19, r24	; 0x13
    3f88:	8b 89       	ldd	r24, Y+19	; 0x13
    3f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f8c:	98 8b       	std	Y+16, r25	; 0x10
    3f8e:	8f 87       	std	Y+15, r24	; 0x0f
    3f90:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f92:	98 89       	ldd	r25, Y+16	; 0x10
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	f1 f7       	brne	.-4      	; 0x3f94 <inc_func+0x866>
    3f98:	98 8b       	std	Y+16, r25	; 0x10
    3f9a:	8f 87       	std	Y+15, r24	; 0x0f
		        _delay_ms(1000);
		        reset_func();
    3f9c:	0e 94 5e 20 	call	0x40bc	; 0x40bc <reset_func>
	            App_Welcome_screen();
    3fa0:	0e 94 86 18 	call	0x310c	; 0x310c <App_Welcome_screen>
    3fa4:	7d c0       	rjmp	.+250    	; 0x40a0 <inc_func+0x972>
	          break;
        default:
	        LCD_clearScreen();
    3fa6:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_clearScreen>
	        LCD_displayStringRowColumn(0,0,"Wrong Input");
    3faa:	21 e4       	ldi	r18, 0x41	; 65
    3fac:	31 e0       	ldi	r19, 0x01	; 1
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	a9 01       	movw	r20, r18
    3fb4:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayStringRowColumn>
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	90 e8       	ldi	r25, 0x80	; 128
    3fbc:	ab eb       	ldi	r26, 0xBB	; 187
    3fbe:	b4 e4       	ldi	r27, 0x44	; 68
    3fc0:	8b 87       	std	Y+11, r24	; 0x0b
    3fc2:	9c 87       	std	Y+12, r25	; 0x0c
    3fc4:	ad 87       	std	Y+13, r26	; 0x0d
    3fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	4a e7       	ldi	r20, 0x7A	; 122
    3fd6:	55 e4       	ldi	r21, 0x45	; 69
    3fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	8f 83       	std	Y+7, r24	; 0x07
    3fe2:	98 87       	std	Y+8, r25	; 0x08
    3fe4:	a9 87       	std	Y+9, r26	; 0x09
    3fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fea:	78 85       	ldd	r23, Y+8	; 0x08
    3fec:	89 85       	ldd	r24, Y+9	; 0x09
    3fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	40 e8       	ldi	r20, 0x80	; 128
    3ff6:	5f e3       	ldi	r21, 0x3F	; 63
    3ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ffc:	88 23       	and	r24, r24
    3ffe:	2c f4       	brge	.+10     	; 0x400a <inc_func+0x8dc>
		__ticks = 1;
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	9e 83       	std	Y+6, r25	; 0x06
    4006:	8d 83       	std	Y+5, r24	; 0x05
    4008:	3f c0       	rjmp	.+126    	; 0x4088 <inc_func+0x95a>
	else if (__tmp > 65535)
    400a:	6f 81       	ldd	r22, Y+7	; 0x07
    400c:	78 85       	ldd	r23, Y+8	; 0x08
    400e:	89 85       	ldd	r24, Y+9	; 0x09
    4010:	9a 85       	ldd	r25, Y+10	; 0x0a
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	3f ef       	ldi	r19, 0xFF	; 255
    4016:	4f e7       	ldi	r20, 0x7F	; 127
    4018:	57 e4       	ldi	r21, 0x47	; 71
    401a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    401e:	18 16       	cp	r1, r24
    4020:	4c f5       	brge	.+82     	; 0x4074 <inc_func+0x946>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4022:	6b 85       	ldd	r22, Y+11	; 0x0b
    4024:	7c 85       	ldd	r23, Y+12	; 0x0c
    4026:	8d 85       	ldd	r24, Y+13	; 0x0d
    4028:	9e 85       	ldd	r25, Y+14	; 0x0e
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	40 e2       	ldi	r20, 0x20	; 32
    4030:	51 e4       	ldi	r21, 0x41	; 65
    4032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	bc 01       	movw	r22, r24
    403c:	cd 01       	movw	r24, r26
    403e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	9e 83       	std	Y+6, r25	; 0x06
    4048:	8d 83       	std	Y+5, r24	; 0x05
    404a:	0f c0       	rjmp	.+30     	; 0x406a <inc_func+0x93c>
    404c:	80 e9       	ldi	r24, 0x90	; 144
    404e:	91 e0       	ldi	r25, 0x01	; 1
    4050:	9c 83       	std	Y+4, r25	; 0x04
    4052:	8b 83       	std	Y+3, r24	; 0x03
    4054:	8b 81       	ldd	r24, Y+3	; 0x03
    4056:	9c 81       	ldd	r25, Y+4	; 0x04
    4058:	01 97       	sbiw	r24, 0x01	; 1
    405a:	f1 f7       	brne	.-4      	; 0x4058 <inc_func+0x92a>
    405c:	9c 83       	std	Y+4, r25	; 0x04
    405e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4060:	8d 81       	ldd	r24, Y+5	; 0x05
    4062:	9e 81       	ldd	r25, Y+6	; 0x06
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	9e 83       	std	Y+6, r25	; 0x06
    4068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406a:	8d 81       	ldd	r24, Y+5	; 0x05
    406c:	9e 81       	ldd	r25, Y+6	; 0x06
    406e:	00 97       	sbiw	r24, 0x00	; 0
    4070:	69 f7       	brne	.-38     	; 0x404c <inc_func+0x91e>
    4072:	14 c0       	rjmp	.+40     	; 0x409c <inc_func+0x96e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4074:	6f 81       	ldd	r22, Y+7	; 0x07
    4076:	78 85       	ldd	r23, Y+8	; 0x08
    4078:	89 85       	ldd	r24, Y+9	; 0x09
    407a:	9a 85       	ldd	r25, Y+10	; 0x0a
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	9e 83       	std	Y+6, r25	; 0x06
    4086:	8d 83       	std	Y+5, r24	; 0x05
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	9e 81       	ldd	r25, Y+6	; 0x06
    408c:	9a 83       	std	Y+2, r25	; 0x02
    408e:	89 83       	std	Y+1, r24	; 0x01
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	9a 81       	ldd	r25, Y+2	; 0x02
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <inc_func+0x966>
    4098:	9a 83       	std	Y+2, r25	; 0x02
    409a:	89 83       	std	Y+1, r24	; 0x01
	        _delay_ms(1500);
	        menu_screen();
    409c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <menu_screen>
	}
	inc_func();
    40a0:	0e 94 97 1b 	call	0x372e	; 0x372e <inc_func>
}
    40a4:	cb 59       	subi	r28, 0x9B	; 155
    40a6:	df 4f       	sbci	r29, 0xFF	; 255
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	de bf       	out	0x3e, r29	; 62
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	cd bf       	out	0x3d, r28	; 61
    40b2:	cf 91       	pop	r28
    40b4:	df 91       	pop	r29
    40b6:	1f 91       	pop	r17
    40b8:	0f 91       	pop	r16
    40ba:	08 95       	ret

000040bc <reset_func>:
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
static void reset_func()
{
    40bc:	df 93       	push	r29
    40be:	cf 93       	push	r28
    40c0:	cd b7       	in	r28, 0x3d	; 61
    40c2:	de b7       	in	r29, 0x3e	; 62
	A_1=B_1=C_1=D_1=0;
    40c4:	10 92 59 01 	sts	0x0159, r1
    40c8:	80 91 59 01 	lds	r24, 0x0159
    40cc:	80 93 58 01 	sts	0x0158, r24
    40d0:	80 91 58 01 	lds	r24, 0x0158
    40d4:	80 93 57 01 	sts	0x0157, r24
    40d8:	80 91 57 01 	lds	r24, 0x0157
    40dc:	80 93 56 01 	sts	0x0156, r24
}
    40e0:	cf 91       	pop	r28
    40e2:	df 91       	pop	r29
    40e4:	08 95       	ret

000040e6 <main>:
 */


#include "app.h"
int main()
{
    40e6:	df 93       	push	r29
    40e8:	cf 93       	push	r28
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
	App_init();
    40ee:	0e 94 7d 18 	call	0x30fa	; 0x30fa <App_init>
	App_Welcome_screen();
    40f2:	0e 94 86 18 	call	0x310c	; 0x310c <App_Welcome_screen>
    40f6:	ff cf       	rjmp	.-2      	; 0x40f6 <main+0x10>

000040f8 <__prologue_saves__>:
    40f8:	2f 92       	push	r2
    40fa:	3f 92       	push	r3
    40fc:	4f 92       	push	r4
    40fe:	5f 92       	push	r5
    4100:	6f 92       	push	r6
    4102:	7f 92       	push	r7
    4104:	8f 92       	push	r8
    4106:	9f 92       	push	r9
    4108:	af 92       	push	r10
    410a:	bf 92       	push	r11
    410c:	cf 92       	push	r12
    410e:	df 92       	push	r13
    4110:	ef 92       	push	r14
    4112:	ff 92       	push	r15
    4114:	0f 93       	push	r16
    4116:	1f 93       	push	r17
    4118:	cf 93       	push	r28
    411a:	df 93       	push	r29
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
    4120:	ca 1b       	sub	r28, r26
    4122:	db 0b       	sbc	r29, r27
    4124:	0f b6       	in	r0, 0x3f	; 63
    4126:	f8 94       	cli
    4128:	de bf       	out	0x3e, r29	; 62
    412a:	0f be       	out	0x3f, r0	; 63
    412c:	cd bf       	out	0x3d, r28	; 61
    412e:	09 94       	ijmp

00004130 <__epilogue_restores__>:
    4130:	2a 88       	ldd	r2, Y+18	; 0x12
    4132:	39 88       	ldd	r3, Y+17	; 0x11
    4134:	48 88       	ldd	r4, Y+16	; 0x10
    4136:	5f 84       	ldd	r5, Y+15	; 0x0f
    4138:	6e 84       	ldd	r6, Y+14	; 0x0e
    413a:	7d 84       	ldd	r7, Y+13	; 0x0d
    413c:	8c 84       	ldd	r8, Y+12	; 0x0c
    413e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4140:	aa 84       	ldd	r10, Y+10	; 0x0a
    4142:	b9 84       	ldd	r11, Y+9	; 0x09
    4144:	c8 84       	ldd	r12, Y+8	; 0x08
    4146:	df 80       	ldd	r13, Y+7	; 0x07
    4148:	ee 80       	ldd	r14, Y+6	; 0x06
    414a:	fd 80       	ldd	r15, Y+5	; 0x05
    414c:	0c 81       	ldd	r16, Y+4	; 0x04
    414e:	1b 81       	ldd	r17, Y+3	; 0x03
    4150:	aa 81       	ldd	r26, Y+2	; 0x02
    4152:	b9 81       	ldd	r27, Y+1	; 0x01
    4154:	ce 0f       	add	r28, r30
    4156:	d1 1d       	adc	r29, r1
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	ed 01       	movw	r28, r26
    4164:	08 95       	ret

00004166 <itoa>:
    4166:	fb 01       	movw	r30, r22
    4168:	9f 01       	movw	r18, r30
    416a:	e8 94       	clt
    416c:	42 30       	cpi	r20, 0x02	; 2
    416e:	c4 f0       	brlt	.+48     	; 0x41a0 <itoa+0x3a>
    4170:	45 32       	cpi	r20, 0x25	; 37
    4172:	b4 f4       	brge	.+44     	; 0x41a0 <itoa+0x3a>
    4174:	4a 30       	cpi	r20, 0x0A	; 10
    4176:	29 f4       	brne	.+10     	; 0x4182 <itoa+0x1c>
    4178:	97 fb       	bst	r25, 7
    417a:	1e f4       	brtc	.+6      	; 0x4182 <itoa+0x1c>
    417c:	90 95       	com	r25
    417e:	81 95       	neg	r24
    4180:	9f 4f       	sbci	r25, 0xFF	; 255
    4182:	64 2f       	mov	r22, r20
    4184:	77 27       	eor	r23, r23
    4186:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__udivmodhi4>
    418a:	80 5d       	subi	r24, 0xD0	; 208
    418c:	8a 33       	cpi	r24, 0x3A	; 58
    418e:	0c f0       	brlt	.+2      	; 0x4192 <itoa+0x2c>
    4190:	89 5d       	subi	r24, 0xD9	; 217
    4192:	81 93       	st	Z+, r24
    4194:	cb 01       	movw	r24, r22
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	a1 f7       	brne	.-24     	; 0x4182 <itoa+0x1c>
    419a:	16 f4       	brtc	.+4      	; 0x41a0 <itoa+0x3a>
    419c:	5d e2       	ldi	r21, 0x2D	; 45
    419e:	51 93       	st	Z+, r21
    41a0:	10 82       	st	Z, r1
    41a2:	c9 01       	movw	r24, r18
    41a4:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <strrev>

000041a8 <strrev>:
    41a8:	dc 01       	movw	r26, r24
    41aa:	fc 01       	movw	r30, r24
    41ac:	67 2f       	mov	r22, r23
    41ae:	71 91       	ld	r23, Z+
    41b0:	77 23       	and	r23, r23
    41b2:	e1 f7       	brne	.-8      	; 0x41ac <strrev+0x4>
    41b4:	32 97       	sbiw	r30, 0x02	; 2
    41b6:	04 c0       	rjmp	.+8      	; 0x41c0 <strrev+0x18>
    41b8:	7c 91       	ld	r23, X
    41ba:	6d 93       	st	X+, r22
    41bc:	70 83       	st	Z, r23
    41be:	62 91       	ld	r22, -Z
    41c0:	ae 17       	cp	r26, r30
    41c2:	bf 07       	cpc	r27, r31
    41c4:	c8 f3       	brcs	.-14     	; 0x41b8 <strrev+0x10>
    41c6:	08 95       	ret

000041c8 <__udivmodhi4>:
    41c8:	aa 1b       	sub	r26, r26
    41ca:	bb 1b       	sub	r27, r27
    41cc:	51 e1       	ldi	r21, 0x11	; 17
    41ce:	07 c0       	rjmp	.+14     	; 0x41de <__udivmodhi4_ep>

000041d0 <__udivmodhi4_loop>:
    41d0:	aa 1f       	adc	r26, r26
    41d2:	bb 1f       	adc	r27, r27
    41d4:	a6 17       	cp	r26, r22
    41d6:	b7 07       	cpc	r27, r23
    41d8:	10 f0       	brcs	.+4      	; 0x41de <__udivmodhi4_ep>
    41da:	a6 1b       	sub	r26, r22
    41dc:	b7 0b       	sbc	r27, r23

000041de <__udivmodhi4_ep>:
    41de:	88 1f       	adc	r24, r24
    41e0:	99 1f       	adc	r25, r25
    41e2:	5a 95       	dec	r21
    41e4:	a9 f7       	brne	.-22     	; 0x41d0 <__udivmodhi4_loop>
    41e6:	80 95       	com	r24
    41e8:	90 95       	com	r25
    41ea:	bc 01       	movw	r22, r24
    41ec:	cd 01       	movw	r24, r26
    41ee:	08 95       	ret

000041f0 <_exit>:
    41f0:	f8 94       	cli

000041f2 <__stop_program>:
    41f2:	ff cf       	rjmp	.-2      	; 0x41f2 <__stop_program>
